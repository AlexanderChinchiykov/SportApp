{"ast":null,"code":"// Reservation service utility functions\nimport { getToken } from './auth';\n\n// Base API URL - use explicit URLs \nconst API_BASE = 'http://localhost:8000';\nconst API_PATH = `${API_BASE}/api/v1`;\n\n/**\r\n * Get all reservations for the current user\r\n * @returns {Promise<Array>} Array of reservation objects\r\n */\nconst getMyReservations = async () => {\n  try {\n    const token = getToken();\n    if (!token) {\n      console.error('No authentication token available');\n      return [];\n    }\n    const response = await fetch(`${API_PATH}/reservations/my-reservations`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n      // Remove credentials:include to avoid CORS issues\n    });\n    if (!response.ok) {\n      if (response.status === 404) {\n        // API endpoint might not exist yet\n        console.log('Reservations endpoint not available');\n        return [];\n      }\n      const errorData = await response.json();\n      throw {\n        status: response.status,\n        message: errorData.detail || `Error ${response.status}: ${response.statusText}`\n      };\n    }\n    const data = await response.json();\n    console.log('Received reservation data:', data);\n\n    // Data should already be formatted correctly from the backend\n    // Just return it directly, no need for additional formatting\n    return data;\n  } catch (error) {\n    console.error('Error fetching reservations:', error);\n    return [];\n  }\n};\n\n/**\r\n * Get available time slots for a specific club on a specific date\r\n * @param {number} clubId - Club ID\r\n * @param {string} date - Date in YYYY-MM-DD format\r\n * @returns {Promise<Array>} Array of time slot objects\r\n */\nconst getAvailableTimeSlots = async (clubId, date) => {\n  try {\n    console.log(`Fetching available slots for club ${clubId} on date ${date}`);\n    const response = await fetch(`${API_PATH}/reservations/available-slots/${clubId}?date=${date}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n      // Remove credentials:include to avoid CORS issues\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw {\n        status: response.status,\n        message: errorData.detail || `Error ${response.status}: ${response.statusText}`\n      };\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching available time slots:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Create a new reservation\r\n * @param {Object} reservationData - Reservation data\r\n * @returns {Promise<Object>} Created reservation object\r\n */\nconst createReservation = async reservationData => {\n  try {\n    const token = getToken();\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    // Make a copy of the data to send to the server\n    // The backend now expects reservation_time as a string (HH:MM) plus a separate date field\n    // No need to convert to ISO format - the backend will handle that\n    const processedData = {\n      ...reservationData\n    };\n    console.log(\"Sending reservation data to server:\", processedData);\n    const response = await fetch(`${API_PATH}/reservations/`, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(processedData)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw {\n        status: response.status,\n        message: errorData.detail || `Error ${response.status}: ${response.statusText}`\n      };\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error creating reservation:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Cancel an existing reservation\r\n * @param {number} reservationId - Reservation ID\r\n * @returns {Promise<Object>} Cancelled reservation details\r\n */\nconst cancelReservation = async reservationId => {\n  try {\n    const token = getToken();\n    if (!token) {\n      throw {\n        status: 401,\n        message: 'Authentication required to cancel a reservation'\n      };\n    }\n    const response = await fetch(`${API_PATH}/reservations/${reservationId}`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n      // Remove credentials:include to avoid CORS issues\n    });\n    if (!response.ok && response.status !== 204) {\n      // 204 is success with no content\n      const errorData = await response.json();\n      throw {\n        status: response.status,\n        message: errorData.detail || `Error ${response.status}: ${response.statusText}`\n      };\n    }\n\n    // Remove the cancelled reservation from session storage if it exists\n    try {\n      const savedBookedSlots = sessionStorage.getItem('bookedTimeSlots');\n      if (savedBookedSlots) {\n        const bookedSlots = JSON.parse(savedBookedSlots);\n\n        // We can't directly match by ID since we only store time/date/club info in session\n        // So we'll keep the existing slots for now - they'll be refreshed on page reload\n\n        // Just update the session storage with the existing data\n        sessionStorage.setItem('bookedTimeSlots', JSON.stringify(bookedSlots));\n      }\n    } catch (error) {\n      console.error(\"Error updating session storage after cancellation:\", error);\n    }\n    return true;\n  } catch (error) {\n    console.error('Error canceling reservation:', error);\n    throw error;\n  }\n};\n\n// Export default object with all functions\nconst reservationService = {\n  getMyReservations,\n  getAvailableTimeSlots,\n  createReservation,\n  cancelReservation\n};\nexport default reservationService;","map":{"version":3,"names":["getToken","API_BASE","API_PATH","getMyReservations","token","console","error","response","fetch","method","headers","ok","status","log","errorData","json","message","detail","statusText","data","getAvailableTimeSlots","clubId","date","createReservation","reservationData","processedData","body","JSON","stringify","cancelReservation","reservationId","savedBookedSlots","sessionStorage","getItem","bookedSlots","parse","setItem","reservationService"],"sources":["F:/Diplomna rabota 3/app/frontend-react/src/utils/reservationService.js"],"sourcesContent":["// Reservation service utility functions\r\nimport { getToken } from './auth';\r\n\r\n// Base API URL - use explicit URLs \r\nconst API_BASE = 'http://localhost:8000';\r\nconst API_PATH = `${API_BASE}/api/v1`;\r\n\r\n/**\r\n * Get all reservations for the current user\r\n * @returns {Promise<Array>} Array of reservation objects\r\n */\r\nconst getMyReservations = async () => {\r\n  try {\r\n    const token = getToken();\r\n    if (!token) {\r\n      console.error('No authentication token available');\r\n      return [];\r\n    }\r\n\r\n    const response = await fetch(`${API_PATH}/reservations/my-reservations`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n      // Remove credentials:include to avoid CORS issues\r\n    });\r\n\r\n    if (!response.ok) {\r\n      if (response.status === 404) {\r\n        // API endpoint might not exist yet\r\n        console.log('Reservations endpoint not available');\r\n        return [];\r\n      }\r\n      const errorData = await response.json();\r\n      throw {\r\n        status: response.status,\r\n        message: errorData.detail || `Error ${response.status}: ${response.statusText}`\r\n      };\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log('Received reservation data:', data);\r\n    \r\n    // Data should already be formatted correctly from the backend\r\n    // Just return it directly, no need for additional formatting\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching reservations:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n/**\r\n * Get available time slots for a specific club on a specific date\r\n * @param {number} clubId - Club ID\r\n * @param {string} date - Date in YYYY-MM-DD format\r\n * @returns {Promise<Array>} Array of time slot objects\r\n */\r\nconst getAvailableTimeSlots = async (clubId, date) => {\r\n  try {\r\n    console.log(`Fetching available slots for club ${clubId} on date ${date}`);\r\n    const response = await fetch(`${API_PATH}/reservations/available-slots/${clubId}?date=${date}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n      // Remove credentials:include to avoid CORS issues\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw {\r\n        status: response.status,\r\n        message: errorData.detail || `Error ${response.status}: ${response.statusText}`\r\n      };\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching available time slots:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Create a new reservation\r\n * @param {Object} reservationData - Reservation data\r\n * @returns {Promise<Object>} Created reservation object\r\n */\r\nconst createReservation = async (reservationData) => {\r\n  try {\r\n    const token = getToken();\r\n    const headers = {\r\n      'Content-Type': 'application/json'\r\n    };\r\n    \r\n    if (token) {\r\n      headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n\r\n    // Make a copy of the data to send to the server\r\n    // The backend now expects reservation_time as a string (HH:MM) plus a separate date field\r\n    // No need to convert to ISO format - the backend will handle that\r\n    const processedData = { ...reservationData };\r\n    \r\n    console.log(\"Sending reservation data to server:\", processedData);\r\n    \r\n    const response = await fetch(`${API_PATH}/reservations/`, {\r\n      method: 'POST',\r\n      headers,\r\n      body: JSON.stringify(processedData)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw {\r\n        status: response.status,\r\n        message: errorData.detail || `Error ${response.status}: ${response.statusText}`\r\n      };\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error creating reservation:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Cancel an existing reservation\r\n * @param {number} reservationId - Reservation ID\r\n * @returns {Promise<Object>} Cancelled reservation details\r\n */\r\nconst cancelReservation = async (reservationId) => {\r\n  try {\r\n    const token = getToken();\r\n    if (!token) {\r\n      throw {\r\n        status: 401,\r\n        message: 'Authentication required to cancel a reservation'\r\n      };\r\n    }\r\n\r\n    const response = await fetch(`${API_PATH}/reservations/${reservationId}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n      // Remove credentials:include to avoid CORS issues\r\n    });\r\n\r\n    if (!response.ok && response.status !== 204) { // 204 is success with no content\r\n      const errorData = await response.json();\r\n      throw {\r\n        status: response.status,\r\n        message: errorData.detail || `Error ${response.status}: ${response.statusText}`\r\n      };\r\n    }\r\n\r\n    // Remove the cancelled reservation from session storage if it exists\r\n    try {\r\n      const savedBookedSlots = sessionStorage.getItem('bookedTimeSlots');\r\n      if (savedBookedSlots) {\r\n        const bookedSlots = JSON.parse(savedBookedSlots);\r\n        \r\n        // We can't directly match by ID since we only store time/date/club info in session\r\n        // So we'll keep the existing slots for now - they'll be refreshed on page reload\r\n        \r\n        // Just update the session storage with the existing data\r\n        sessionStorage.setItem('bookedTimeSlots', JSON.stringify(bookedSlots));\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error updating session storage after cancellation:\", error);\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error canceling reservation:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Export default object with all functions\r\nconst reservationService = {\r\n  getMyReservations,\r\n  getAvailableTimeSlots,\r\n  createReservation,\r\n  cancelReservation\r\n};\r\n\r\nexport default reservationService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}