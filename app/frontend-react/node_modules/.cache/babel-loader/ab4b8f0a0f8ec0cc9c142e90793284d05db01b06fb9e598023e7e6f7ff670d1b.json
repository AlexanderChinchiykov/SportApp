{"ast":null,"code":"// Reservation service utility functions\nimport { getToken } from './auth';\n\n// Base API URL - use explicit URLs \nconst API_BASE = 'http://localhost:8000';\nconst API_PATH = `${API_BASE}/api/v1`;\n\n/**\r\n * Get all reservations for the current user\r\n * @returns {Promise<Array>} Array of reservation objects\r\n */\nconst getMyReservations = async () => {\n  try {\n    const token = getToken();\n    if (!token) {\n      console.error('No authentication token available');\n      return [];\n    }\n    const response = await fetch(`${API_PATH}/reservations/my-reservations`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include'\n    });\n    if (!response.ok) {\n      if (response.status === 404) {\n        // API endpoint might not exist yet\n        console.log('Reservations endpoint not available');\n        return [];\n      }\n      const errorData = await response.json();\n      throw {\n        status: response.status,\n        message: errorData.detail || `Error ${response.status}: ${response.statusText}`\n      };\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching reservations:', error);\n    return [];\n  }\n};\n\n/**\r\n * Get available time slots for a specific club on a specific date\r\n * @param {number} clubId - Club ID\r\n * @param {string} date - Date in YYYY-MM-DD format\r\n * @returns {Promise<Array>} Array of time slot objects\r\n */\nconst getAvailableTimeSlots = async (clubId, date) => {\n  try {\n    console.log(`Fetching available slots for club ${clubId} on date ${date}`);\n    const response = await fetch(`${API_PATH}/reservations/available-slots/${clubId}?date=${date}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include'\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw {\n        status: response.status,\n        message: errorData.detail || `Error ${response.status}: ${response.statusText}`\n      };\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching available time slots:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Create a new reservation\r\n * @param {Object} reservationData - Reservation data\r\n * @returns {Promise<Object>} Created reservation object\r\n */\nconst createReservation = async reservationData => {\n  try {\n    const token = getToken();\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    // Make a copy of the data to modify \n    const processedData = {\n      ...reservationData\n    };\n\n    // Convert the reservation_time string to an ISO datetime string if it's not already\n    if (typeof processedData.reservation_time === 'string' && !processedData.reservation_time.includes('T')) {\n      // The reservation_time is in format \"HH:MM\" and needs to be combined with the date\n      const [hours, minutes] = processedData.reservation_time.split(':');\n      const reservationDate = new Date();\n      if (processedData.date) {\n        // If there's a separate date field, use it \n        const [year, month, day] = processedData.date.split('-');\n        reservationDate.setFullYear(parseInt(year), parseInt(month) - 1, parseInt(day));\n        // Remove the separate date field as backend doesn't expect it\n        delete processedData.date;\n      }\n      reservationDate.setHours(parseInt(hours), parseInt(minutes), 0, 0);\n      processedData.reservation_time = reservationDate.toISOString();\n    }\n    console.log(\"Sending reservation data to server:\", processedData);\n    const response = await fetch(`${API_PATH}/reservations/`, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(processedData)\n      // Remove credentials: 'include' as it might cause CORS issues with the token approach\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw {\n        status: response.status,\n        message: errorData.detail || `Error ${response.status}: ${response.statusText}`\n      };\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error creating reservation:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Cancel an existing reservation\r\n * @param {number} reservationId - Reservation ID\r\n * @returns {Promise<boolean>} Success status\r\n */\nconst cancelReservation = async reservationId => {\n  try {\n    const token = getToken();\n    if (!token) {\n      throw {\n        status: 401,\n        message: 'Authentication required to cancel a reservation'\n      };\n    }\n    const response = await fetch(`${API_PATH}/reservations/${reservationId}`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include'\n    });\n    if (!response.ok && response.status !== 204) {\n      // 204 is success with no content\n      const errorData = await response.json();\n      throw {\n        status: response.status,\n        message: errorData.detail || `Error ${response.status}: ${response.statusText}`\n      };\n    }\n    return true;\n  } catch (error) {\n    console.error('Error canceling reservation:', error);\n    throw error;\n  }\n};\n\n// Export default object with all functions\nconst reservationService = {\n  getMyReservations,\n  getAvailableTimeSlots,\n  createReservation,\n  cancelReservation\n};\nexport default reservationService;","map":{"version":3,"names":["getToken","API_BASE","API_PATH","getMyReservations","token","console","error","response","fetch","method","headers","credentials","ok","status","log","errorData","json","message","detail","statusText","data","getAvailableTimeSlots","clubId","date","createReservation","reservationData","processedData","reservation_time","includes","hours","minutes","split","reservationDate","Date","year","month","day","setFullYear","parseInt","setHours","toISOString","body","JSON","stringify","cancelReservation","reservationId","reservationService"],"sources":["F:/Diplomna rabota 3/app/frontend-react/src/utils/reservationService.js"],"sourcesContent":["// Reservation service utility functions\r\nimport { getToken } from './auth';\r\n\r\n// Base API URL - use explicit URLs \r\nconst API_BASE = 'http://localhost:8000';\r\nconst API_PATH = `${API_BASE}/api/v1`;\r\n\r\n/**\r\n * Get all reservations for the current user\r\n * @returns {Promise<Array>} Array of reservation objects\r\n */\r\nconst getMyReservations = async () => {\r\n  try {\r\n    const token = getToken();\r\n    if (!token) {\r\n      console.error('No authentication token available');\r\n      return [];\r\n    }\r\n\r\n    const response = await fetch(`${API_PATH}/reservations/my-reservations`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      credentials: 'include'\r\n    });\r\n\r\n    if (!response.ok) {\r\n      if (response.status === 404) {\r\n        // API endpoint might not exist yet\r\n        console.log('Reservations endpoint not available');\r\n        return [];\r\n      }\r\n      const errorData = await response.json();\r\n      throw {\r\n        status: response.status,\r\n        message: errorData.detail || `Error ${response.status}: ${response.statusText}`\r\n      };\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching reservations:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n/**\r\n * Get available time slots for a specific club on a specific date\r\n * @param {number} clubId - Club ID\r\n * @param {string} date - Date in YYYY-MM-DD format\r\n * @returns {Promise<Array>} Array of time slot objects\r\n */\r\nconst getAvailableTimeSlots = async (clubId, date) => {\r\n  try {\r\n    console.log(`Fetching available slots for club ${clubId} on date ${date}`);\r\n    const response = await fetch(`${API_PATH}/reservations/available-slots/${clubId}?date=${date}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      credentials: 'include'\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw {\r\n        status: response.status,\r\n        message: errorData.detail || `Error ${response.status}: ${response.statusText}`\r\n      };\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching available time slots:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Create a new reservation\r\n * @param {Object} reservationData - Reservation data\r\n * @returns {Promise<Object>} Created reservation object\r\n */\r\nconst createReservation = async (reservationData) => {\r\n  try {\r\n    const token = getToken();\r\n    const headers = {\r\n      'Content-Type': 'application/json'\r\n    };\r\n    \r\n    if (token) {\r\n      headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n\r\n    // Make a copy of the data to modify \r\n    const processedData = { ...reservationData };\r\n    \r\n    // Convert the reservation_time string to an ISO datetime string if it's not already\r\n    if (typeof processedData.reservation_time === 'string' && !processedData.reservation_time.includes('T')) {\r\n      // The reservation_time is in format \"HH:MM\" and needs to be combined with the date\r\n      const [hours, minutes] = processedData.reservation_time.split(':');\r\n      const reservationDate = new Date();\r\n      \r\n      if (processedData.date) {\r\n        // If there's a separate date field, use it \r\n        const [year, month, day] = processedData.date.split('-');\r\n        reservationDate.setFullYear(parseInt(year), parseInt(month) - 1, parseInt(day));\r\n        // Remove the separate date field as backend doesn't expect it\r\n        delete processedData.date;\r\n      }\r\n      \r\n      reservationDate.setHours(parseInt(hours), parseInt(minutes), 0, 0);\r\n      processedData.reservation_time = reservationDate.toISOString();\r\n    }\r\n    \r\n    console.log(\"Sending reservation data to server:\", processedData);\r\n    \r\n    const response = await fetch(`${API_PATH}/reservations/`, {\r\n      method: 'POST',\r\n      headers,\r\n      body: JSON.stringify(processedData)\r\n      // Remove credentials: 'include' as it might cause CORS issues with the token approach\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw {\r\n        status: response.status,\r\n        message: errorData.detail || `Error ${response.status}: ${response.statusText}`\r\n      };\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error creating reservation:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Cancel an existing reservation\r\n * @param {number} reservationId - Reservation ID\r\n * @returns {Promise<boolean>} Success status\r\n */\r\nconst cancelReservation = async (reservationId) => {\r\n  try {\r\n    const token = getToken();\r\n    if (!token) {\r\n      throw {\r\n        status: 401,\r\n        message: 'Authentication required to cancel a reservation'\r\n      };\r\n    }\r\n\r\n    const response = await fetch(`${API_PATH}/reservations/${reservationId}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      credentials: 'include'\r\n    });\r\n\r\n    if (!response.ok && response.status !== 204) { // 204 is success with no content\r\n      const errorData = await response.json();\r\n      throw {\r\n        status: response.status,\r\n        message: errorData.detail || `Error ${response.status}: ${response.statusText}`\r\n      };\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error canceling reservation:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Export default object with all functions\r\nconst reservationService = {\r\n  getMyReservations,\r\n  getAvailableTimeSlots,\r\n  createReservation,\r\n  cancelReservation\r\n};\r\n\r\nexport default reservationService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}