{"ast":null,"code":"// Authentication utility functions\n\nconst API_URL = '/api/v1';\nconst TOKEN_KEY = 'sports_app_token';\nconst USER_DATA_KEY = 'sports_app_user';\n\n// Login function\nexport const loginUser = async credentials => {\n  try {\n    const response = await fetch(`${API_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials),\n      credentials: 'include' // Important for cookies\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(typeof errorData.detail === 'string' ? errorData.detail : JSON.stringify(errorData.detail));\n    }\n    const data = await response.json();\n\n    // Store auth data in localStorage\n    localStorage.setItem('userId', data.user.id);\n    localStorage.setItem('token', data.access_token);\n    localStorage.setItem('username', data.user.username);\n    localStorage.setItem('isClubOwner', data.user.is_club_owner);\n    localStorage.setItem('role', data.user.role);\n    localStorage.setItem('isAuthenticated', 'true');\n    return data;\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error;\n  }\n};\n\n// Register function\nexport const registerUser = async userData => {\n  try {\n    const response = await fetch(`${API_URL}/auth/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData),\n      credentials: 'include'\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(typeof errorData.detail === 'string' ? errorData.detail : JSON.stringify(errorData.detail));\n    }\n    const data = await response.json();\n\n    // Store auth data in localStorage\n    localStorage.setItem('userId', data.user.id);\n    localStorage.setItem('token', data.access_token);\n    localStorage.setItem('username', data.user.username);\n    localStorage.setItem('isClubOwner', data.user.is_club_owner);\n    localStorage.setItem('role', data.user.role);\n    localStorage.setItem('isAuthenticated', 'true');\n    return data;\n  } catch (error) {\n    console.error('Registration error:', error);\n    throw error;\n  }\n};\n\n// Logout function\nexport const logoutUser = async () => {\n  try {\n    // Clear all auth data from localStorage\n    localStorage.removeItem('userId');\n    localStorage.removeItem('token');\n    localStorage.removeItem('username');\n    localStorage.removeItem('isClubOwner');\n    localStorage.removeItem('role');\n    localStorage.removeItem('isAuthenticated');\n\n    // Optional: Call logout endpoint if your backend has one\n    // await fetch(`${API_URL}/auth/logout`, {\n    //   method: 'POST',\n    //   credentials: 'include'\n    // });\n\n    return true;\n  } catch (error) {\n    console.error('Logout error:', error);\n    throw error;\n  }\n};\n\n// Check if user is authenticated\nexport const isAuthenticated = () => {\n  try {\n    const token = getToken();\n    const userId = localStorage.getItem('userId');\n    const isAuthFlag = localStorage.getItem('isAuthenticated') === 'true';\n    console.log('Auth check:', {\n      hasToken: !!token,\n      hasUserId: !!userId,\n      isAuthFlag\n    });\n\n    // If we have the explicit flag and both token and userId\n    if (isAuthFlag && token && userId) {\n      // Check token expiration only if we have a token\n      if (isTokenExpired()) {\n        console.log('Token is expired, clearing auth data');\n        clearAuthData();\n        return false;\n      }\n      return true;\n    }\n\n    // If we're missing the flag but have both token and userId\n    if (token && userId) {\n      // Set the flag since we have both token and userId\n      localStorage.setItem('isAuthenticated', 'true');\n\n      // But still check if token is expired\n      if (isTokenExpired()) {\n        console.log('Token is expired, clearing auth data');\n        clearAuthData();\n        return false;\n      }\n      return true;\n    }\n\n    // If we don't have both token and userId, clear any partial auth data\n    if (!token || !userId) {\n      console.log('Missing auth data, clearing any partial data');\n      clearAuthData();\n      return false;\n    }\n    return false;\n  } catch (err) {\n    console.error('Error checking authentication:', err);\n    return false;\n  }\n};\n\n// Get current user info\nexport const getCurrentUser = () => {\n  if (!isAuthenticated()) {\n    return null;\n  }\n  return {\n    id: localStorage.getItem('userId'),\n    username: localStorage.getItem('username'),\n    isClubOwner: localStorage.getItem('isClubOwner') === 'true',\n    role: localStorage.getItem('role')\n  };\n};\n\n/**\r\n * Save JWT token to localStorage\r\n */\nexport function saveToken(token) {\n  localStorage.setItem(TOKEN_KEY, token);\n}\n\n/**\r\n * Get JWT token from localStorage\r\n */\nexport const getToken = () => {\n  try {\n    // Try getting from token/sports_app_token storage keys\n    const token = localStorage.getItem('sports_app_token') || localStorage.getItem('token');\n    if (token) return token;\n    return null;\n  } catch (err) {\n    console.error('Error accessing localStorage:', err);\n    return null;\n  }\n};\n\n/**\r\n * Remove JWT token from localStorage\r\n */\nexport function removeToken() {\n  localStorage.removeItem(TOKEN_KEY);\n  localStorage.removeItem(USER_DATA_KEY);\n}\n\n/**\r\n * Parse JWT token to get payload\r\n */\nexport function parseToken(token) {\n  if (!token) return null;\n  try {\n    // Split the token and get the payload part (2nd part)\n    const base64Url = token.split('.')[1];\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));\n    return JSON.parse(jsonPayload);\n  } catch (error) {\n    console.error('Error parsing token:', error);\n    return null;\n  }\n}\n\n/**\r\n * Check if token is expired\r\n */\nexport function isTokenExpired() {\n  const token = getToken();\n  if (!token) return true;\n  try {\n    const payload = parseToken(token);\n    if (!payload || !payload.exp) return true;\n\n    // Get current time in seconds\n    const now = Math.floor(Date.now() / 1000);\n    return payload.exp < now;\n  } catch (error) {\n    console.error('Error checking token expiration:', error);\n    return true;\n  }\n}\n\n/**\r\n * Save user data to localStorage\r\n */\nexport function saveUserData(user) {\n  if (user) {\n    localStorage.setItem(USER_DATA_KEY, JSON.stringify(user));\n  }\n}\n\n/**\r\n * Get user data from localStorage\r\n */\nexport function getUserData() {\n  const userData = localStorage.getItem(USER_DATA_KEY);\n  if (userData) {\n    try {\n      return JSON.parse(userData);\n    } catch (e) {\n      console.error('Error parsing user data:', e);\n      return null;\n    }\n  }\n  return null;\n}\n\n/**\r\n * Logout user by removing token and userData\r\n */\nexport function logout() {\n  removeToken();\n  window.location.href = '/login';\n}\n\n/**\r\n * Handle authentication response from login/register\r\n */\nexport function handleAuthResponse(data) {\n  const {\n    access_token,\n    user\n  } = data;\n  if (access_token) {\n    saveToken(access_token);\n    localStorage.setItem('userId', user.id);\n    localStorage.setItem('token', access_token);\n    localStorage.setItem('username', user.username);\n    localStorage.setItem('isClubOwner', user.is_club_owner);\n    localStorage.setItem('role', user.role);\n    localStorage.setItem('isAuthenticated', 'true');\n    if (user) {\n      saveUserData(user);\n    }\n    return true;\n  }\n  return false;\n}\n\n/**\r\n * Clear all authentication data from localStorage\r\n */\nexport function clearAuthData() {\n  localStorage.removeItem('userId');\n  localStorage.removeItem('token');\n  localStorage.removeItem('username');\n  localStorage.removeItem('isClubOwner');\n  localStorage.removeItem('role');\n  localStorage.removeItem('isAuthenticated');\n  localStorage.removeItem(TOKEN_KEY);\n  localStorage.removeItem(USER_DATA_KEY);\n}\n\n/**\r\n * Force logout - can be used to clear any existing credentials\r\n * during development or when authentication issues occur\r\n */\nexport function forceLogout() {\n  clearAuthData();\n}\nexport default {\n  saveToken,\n  getToken,\n  removeToken,\n  isAuthenticated,\n  parseToken,\n  isTokenExpired,\n  saveUserData,\n  getUserData,\n  logout,\n  handleAuthResponse\n};","map":{"version":3,"names":["API_URL","TOKEN_KEY","USER_DATA_KEY","loginUser","credentials","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","detail","data","localStorage","setItem","user","id","access_token","username","is_club_owner","role","error","console","registerUser","userData","logoutUser","removeItem","isAuthenticated","token","getToken","userId","getItem","isAuthFlag","log","hasToken","hasUserId","isTokenExpired","clearAuthData","err","getCurrentUser","isClubOwner","saveToken","removeToken","parseToken","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","parse","payload","exp","now","Math","floor","Date","saveUserData","getUserData","e","logout","window","location","href","handleAuthResponse","forceLogout"],"sources":["F:/Diplomna rabota 3/app/frontend-react/src/utils/auth.js"],"sourcesContent":["// Authentication utility functions\r\n\r\nconst API_URL = '/api/v1';\r\nconst TOKEN_KEY = 'sports_app_token';\r\nconst USER_DATA_KEY = 'sports_app_user';\r\n\r\n// Login function\r\nexport const loginUser = async (credentials) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/auth/login`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(credentials),\r\n      credentials: 'include' // Important for cookies\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(typeof errorData.detail === 'string' \r\n        ? errorData.detail \r\n        : JSON.stringify(errorData.detail));\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    // Store auth data in localStorage\r\n    localStorage.setItem('userId', data.user.id);\r\n    localStorage.setItem('token', data.access_token);\r\n    localStorage.setItem('username', data.user.username);\r\n    localStorage.setItem('isClubOwner', data.user.is_club_owner);\r\n    localStorage.setItem('role', data.user.role);\r\n    localStorage.setItem('isAuthenticated', 'true');\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    console.error('Login error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Register function\r\nexport const registerUser = async (userData) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/auth/register`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(userData),\r\n      credentials: 'include'\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(typeof errorData.detail === 'string' \r\n        ? errorData.detail \r\n        : JSON.stringify(errorData.detail));\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    // Store auth data in localStorage\r\n    localStorage.setItem('userId', data.user.id);\r\n    localStorage.setItem('token', data.access_token);\r\n    localStorage.setItem('username', data.user.username);\r\n    localStorage.setItem('isClubOwner', data.user.is_club_owner);\r\n    localStorage.setItem('role', data.user.role);\r\n    localStorage.setItem('isAuthenticated', 'true');\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    console.error('Registration error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Logout function\r\nexport const logoutUser = async () => {\r\n  try {\r\n    // Clear all auth data from localStorage\r\n    localStorage.removeItem('userId');\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('username');\r\n    localStorage.removeItem('isClubOwner');\r\n    localStorage.removeItem('role');\r\n    localStorage.removeItem('isAuthenticated');\r\n    \r\n    // Optional: Call logout endpoint if your backend has one\r\n    // await fetch(`${API_URL}/auth/logout`, {\r\n    //   method: 'POST',\r\n    //   credentials: 'include'\r\n    // });\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Logout error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Check if user is authenticated\r\nexport const isAuthenticated = () => {\r\n  try {\r\n    const token = getToken();\r\n    const userId = localStorage.getItem('userId');\r\n    const isAuthFlag = localStorage.getItem('isAuthenticated') === 'true';\r\n    \r\n    console.log('Auth check:', {\r\n      hasToken: !!token,\r\n      hasUserId: !!userId,\r\n      isAuthFlag\r\n    });\r\n    \r\n    // If we have the explicit flag and both token and userId\r\n    if (isAuthFlag && token && userId) {\r\n      // Check token expiration only if we have a token\r\n      if (isTokenExpired()) {\r\n        console.log('Token is expired, clearing auth data');\r\n        clearAuthData();\r\n        return false;\r\n      }\r\n      return true;\r\n    }\r\n    \r\n    // If we're missing the flag but have both token and userId\r\n    if (token && userId) {\r\n      // Set the flag since we have both token and userId\r\n      localStorage.setItem('isAuthenticated', 'true');\r\n      \r\n      // But still check if token is expired\r\n      if (isTokenExpired()) {\r\n        console.log('Token is expired, clearing auth data');\r\n        clearAuthData();\r\n        return false;\r\n      }\r\n      return true;\r\n    }\r\n    \r\n    // If we don't have both token and userId, clear any partial auth data\r\n    if (!token || !userId) {\r\n      console.log('Missing auth data, clearing any partial data');\r\n      clearAuthData();\r\n      return false;\r\n    }\r\n    \r\n    return false;\r\n  } catch (err) {\r\n    console.error('Error checking authentication:', err);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Get current user info\r\nexport const getCurrentUser = () => {\r\n  if (!isAuthenticated()) {\r\n    return null;\r\n  }\r\n  \r\n  return {\r\n    id: localStorage.getItem('userId'),\r\n    username: localStorage.getItem('username'),\r\n    isClubOwner: localStorage.getItem('isClubOwner') === 'true',\r\n    role: localStorage.getItem('role')\r\n  };\r\n};\r\n\r\n/**\r\n * Save JWT token to localStorage\r\n */\r\nexport function saveToken(token) {\r\n  localStorage.setItem(TOKEN_KEY, token);\r\n}\r\n\r\n/**\r\n * Get JWT token from localStorage\r\n */\r\nexport const getToken = () => {\r\n  try {\r\n    // Try getting from token/sports_app_token storage keys\r\n    const token = localStorage.getItem('sports_app_token') || localStorage.getItem('token');\r\n    if (token) return token;\r\n    \r\n    return null;\r\n  } catch (err) {\r\n    console.error('Error accessing localStorage:', err);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Remove JWT token from localStorage\r\n */\r\nexport function removeToken() {\r\n  localStorage.removeItem(TOKEN_KEY);\r\n  localStorage.removeItem(USER_DATA_KEY);\r\n}\r\n\r\n/**\r\n * Parse JWT token to get payload\r\n */\r\nexport function parseToken(token) {\r\n  if (!token) return null;\r\n  try {\r\n    // Split the token and get the payload part (2nd part)\r\n    const base64Url = token.split('.')[1];\r\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n    const jsonPayload = decodeURIComponent(\r\n      atob(base64)\r\n        .split('')\r\n        .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\r\n        .join('')\r\n    );\r\n    return JSON.parse(jsonPayload);\r\n  } catch (error) {\r\n    console.error('Error parsing token:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Check if token is expired\r\n */\r\nexport function isTokenExpired() {\r\n  const token = getToken();\r\n  if (!token) return true;\r\n  \r\n  try {\r\n    const payload = parseToken(token);\r\n    if (!payload || !payload.exp) return true;\r\n    \r\n    // Get current time in seconds\r\n    const now = Math.floor(Date.now() / 1000);\r\n    return payload.exp < now;\r\n  } catch (error) {\r\n    console.error('Error checking token expiration:', error);\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * Save user data to localStorage\r\n */\r\nexport function saveUserData(user) {\r\n  if (user) {\r\n    localStorage.setItem(USER_DATA_KEY, JSON.stringify(user));\r\n  }\r\n}\r\n\r\n/**\r\n * Get user data from localStorage\r\n */\r\nexport function getUserData() {\r\n  const userData = localStorage.getItem(USER_DATA_KEY);\r\n  if (userData) {\r\n    try {\r\n      return JSON.parse(userData);\r\n    } catch (e) {\r\n      console.error('Error parsing user data:', e);\r\n      return null;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/**\r\n * Logout user by removing token and userData\r\n */\r\nexport function logout() {\r\n  removeToken();\r\n  window.location.href = '/login';\r\n}\r\n\r\n/**\r\n * Handle authentication response from login/register\r\n */\r\nexport function handleAuthResponse(data) {\r\n  const { access_token, user } = data;\r\n  \r\n  if (access_token) {\r\n    saveToken(access_token);\r\n    localStorage.setItem('userId', user.id);\r\n    localStorage.setItem('token', access_token);\r\n    localStorage.setItem('username', user.username);\r\n    localStorage.setItem('isClubOwner', user.is_club_owner);\r\n    localStorage.setItem('role', user.role);\r\n    localStorage.setItem('isAuthenticated', 'true');\r\n    \r\n    if (user) {\r\n      saveUserData(user);\r\n    }\r\n    \r\n    return true;\r\n  }\r\n  \r\n  return false;\r\n}\r\n\r\n/**\r\n * Clear all authentication data from localStorage\r\n */\r\nexport function clearAuthData() {\r\n  localStorage.removeItem('userId');\r\n  localStorage.removeItem('token');\r\n  localStorage.removeItem('username');\r\n  localStorage.removeItem('isClubOwner');\r\n  localStorage.removeItem('role');\r\n  localStorage.removeItem('isAuthenticated');\r\n  localStorage.removeItem(TOKEN_KEY);\r\n  localStorage.removeItem(USER_DATA_KEY);\r\n}\r\n\r\n/**\r\n * Force logout - can be used to clear any existing credentials\r\n * during development or when authentication issues occur\r\n */\r\nexport function forceLogout() {\r\n  clearAuthData();\r\n}\r\n\r\nexport default {\r\n  saveToken,\r\n  getToken,\r\n  removeToken,\r\n  isAuthenticated,\r\n  parseToken,\r\n  isTokenExpired,\r\n  saveUserData,\r\n  getUserData,\r\n  logout,\r\n  handleAuthResponse\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}