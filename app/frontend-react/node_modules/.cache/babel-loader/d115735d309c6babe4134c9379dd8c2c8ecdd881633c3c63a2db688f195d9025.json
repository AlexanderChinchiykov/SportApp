{"ast":null,"code":"// api.js - Comprehensive API client for FastAPI backend\n\nimport { getToken } from './auth';\n\n// Base API URL - use explicit URL instead of relying on proxy which might not be working\nexport const API_BASE = 'http://localhost:8000';\nexport const API_PATH = '/api/v1'; // Restore the v1 as it's needed based on the backend\n\n/**\r\n * Core API request function with automatic token handling\r\n */\nexport async function apiRequest(path, {\n  method = 'GET',\n  body,\n  token,\n  headers = {}\n} = {}) {\n  // Get token from auth utility if not provided explicitly\n  const authToken = token || getToken();\n\n  // Build headers with auth token if available\n  const requestHeaders = {\n    'Content-Type': 'application/json',\n    ...headers\n  };\n  if (authToken) {\n    requestHeaders['Authorization'] = `Bearer ${authToken}`;\n  }\n\n  // Build the full URL\n  const url = `${API_BASE}${path}`;\n  try {\n    console.log(`Making ${method} request to ${url}`, {\n      method,\n      headers: {\n        ...requestHeaders,\n        Authorization: authToken ? 'Bearer [HIDDEN]' : undefined\n      },\n      bodyPreview: body ? JSON.stringify(body).substring(0, 100) + (JSON.stringify(body).length > 100 ? '...' : '') : undefined\n    });\n    const response = await fetch(url, {\n      method,\n      headers: requestHeaders,\n      body: body ? JSON.stringify(body) : undefined,\n      credentials: 'include' // Include cookies for sessions\n    });\n\n    // Log response status for debugging\n    console.log(`Response status: ${response.status} ${response.statusText}`);\n\n    // Get the response text first\n    const responseText = await response.text();\n\n    // Try to parse it as JSON\n    let data;\n    try {\n      data = JSON.parse(responseText);\n    } catch (e) {\n      console.log(\"Response is not JSON:\", responseText.substring(0, 500) + (responseText.length > 500 ? '...' : ''));\n      data = {\n        detail: responseText\n      };\n    }\n\n    // Log response data for debugging\n    console.log(\"Response data preview:\", typeof data === 'object' ? JSON.stringify(data).substring(0, 200) + (JSON.stringify(data).length > 200 ? '...' : '') : data);\n\n    // Handle API errors\n    if (!response.ok) {\n      if (response.status === 404) {\n        // For 404s, return a standard response instead of throwing\n        // This is useful for endpoints that might not exist in development\n        if (method === 'GET') {\n          console.log(\"Resource not found but handling gracefully\");\n          return Array.isArray(data) ? [] : {};\n        }\n      }\n      const error = {\n        status: response.status,\n        data,\n        message: data.detail || data.message || `Error ${response.status}: ${response.statusText}`\n      };\n      console.error('API error:', error);\n\n      // Special handling for 500 errors to give more details\n      if (response.status >= 500) {\n        console.error('Server error details:', data);\n      }\n      throw error;\n    }\n    return data;\n  } catch (error) {\n    // Enhance error with additional info if it's not already our format\n    if (!error.status) {\n      console.error('API request failed:', error);\n      throw {\n        status: 0,\n        message: error.message || 'Network error, please check your connection',\n        data: {}\n      };\n    }\n    throw error;\n  }\n}\n\n// Authentication API\nexport const authAPI = {\n  login: (email, password) => {\n    console.log(`Attempting login for email: ${email}`);\n    return apiRequest(`${API_PATH}/auth/login`, {\n      method: 'POST',\n      body: {\n        email,\n        password\n      } // Match the UserLogin schema which expects email and password\n    });\n  },\n  register: userData => apiRequest(`${API_PATH}/auth/register`, {\n    method: 'POST',\n    body: userData\n  }),\n  getCurrentUser: () => apiRequest(`${API_PATH}/users/me`, {\n    method: 'GET'\n  }),\n  updateProfile: userData => apiRequest(`${API_PATH}/users/me`, {\n    method: 'PUT',\n    body: userData\n  }),\n  // Google OAuth endpoints\n  googleLogin: () => {\n    const url = `${API_BASE}${API_PATH}/auth/google/login`;\n    console.log(`Redirecting to Google OAuth: ${url}`);\n    window.location.href = url;\n  },\n  // This handles the redirect back from Google after authentication\n  handleGoogleCallback: async code => {\n    try {\n      console.log('Calling handleGoogleCallback with code:', code);\n      const data = await apiRequest(`${API_PATH}/auth/google/token-exchange`, {\n        method: 'POST',\n        body: {\n          code\n        }\n      });\n      console.log('Google callback response:', data);\n      return data;\n    } catch (error) {\n      console.error('Google OAuth callback error:', error);\n      throw error;\n    }\n  }\n};\n\n// Clubs API\nexport const clubsAPI = {\n  getAllClubs: (filters = {}) => {\n    // Convert filters object to URL params\n    const params = new URLSearchParams();\n    Object.entries(filters).forEach(([key, value]) => {\n      if (value !== undefined && value !== null && value !== '') {\n        params.append(key, value);\n      }\n    });\n    const queryString = params.toString() ? `?${params.toString()}` : '';\n    return apiRequest(`${API_PATH}/clubs${queryString}`);\n  },\n  getClubById: clubId => apiRequest(`${API_PATH}/clubs/${clubId}`),\n  createClub: clubData => {\n    console.log(\"Calling createClub API with data:\", clubData);\n    // Make sure the URL matches exactly what the backend expects\n    return apiRequest(`${API_PATH}/clubs/`, {\n      // Add trailing slash to match FastAPI endpoint\n      method: 'POST',\n      body: clubData\n    });\n  },\n  updateClub: (clubId, clubData) => {\n    console.log(`Updating club ${clubId} with data:`, clubData);\n    return apiRequest(`${API_PATH}/clubs/${clubId}`, {\n      method: 'PUT',\n      body: clubData\n    });\n  },\n  deleteClub: clubId => apiRequest(`${API_PATH}/clubs/${clubId}`, {\n    method: 'DELETE'\n  }),\n  getClubsByOwner: () => apiRequest(`${API_PATH}/clubs/my-clubs`),\n  removePicture: (clubId, pictureUrl) => apiRequest(`${API_PATH}/clubs/${clubId}/pictures?picture_url=${encodeURIComponent(pictureUrl)}`, {\n    method: 'DELETE'\n  }),\n  joinClub: clubId => apiRequest(`${API_PATH}/clubs/${clubId}/join`, {\n    method: 'POST'\n  })\n};\n\n// Reservations API\nexport const reservationsAPI = {\n  getMyReservations: async () => {\n    try {\n      return await apiRequest(`${API_PATH}/reservations/my-reservations`);\n    } catch (error) {\n      console.log('Reservations API might not be implemented yet:', error);\n      // Return empty array instead of throwing when endpoint doesn't exist\n      if (error.status === 404 || error.status === 405) {\n        return [];\n      }\n      throw error;\n    }\n  },\n  createReservation: reservationData => {\n    console.log(\"Creating reservation with data:\", reservationData);\n    return apiRequest(`${API_PATH}/reservations/`, {\n      method: 'POST',\n      body: reservationData\n    });\n  },\n  getAvailableTimeSlots: (clubId, date) => {\n    console.log(`Getting available slots for club ${clubId} on date ${date}`);\n    return apiRequest(`${API_PATH}/reservations/available-slots/${clubId}?date=${date}`);\n  }\n};\nexport default {\n  apiRequest,\n  auth: authAPI,\n  clubs: clubsAPI,\n  reservations: reservationsAPI\n};","map":{"version":3,"names":["getToken","API_BASE","API_PATH","apiRequest","path","method","body","token","headers","authToken","requestHeaders","url","console","log","Authorization","undefined","bodyPreview","JSON","stringify","substring","length","response","fetch","credentials","status","statusText","responseText","text","data","parse","e","detail","ok","Array","isArray","error","message","authAPI","login","email","password","register","userData","getCurrentUser","updateProfile","googleLogin","window","location","href","handleGoogleCallback","code","clubsAPI","getAllClubs","filters","params","URLSearchParams","Object","entries","forEach","key","value","append","queryString","toString","getClubById","clubId","createClub","clubData","updateClub","deleteClub","getClubsByOwner","removePicture","pictureUrl","encodeURIComponent","joinClub","reservationsAPI","getMyReservations","createReservation","reservationData","getAvailableTimeSlots","date","auth","clubs","reservations"],"sources":["F:/Diplomna rabota 3/app/frontend-react/src/utils/api.js"],"sourcesContent":["// api.js - Comprehensive API client for FastAPI backend\r\n\r\nimport { getToken } from './auth';\r\n\r\n// Base API URL - use explicit URL instead of relying on proxy which might not be working\r\nexport const API_BASE = 'http://localhost:8000';\r\nexport const API_PATH = '/api/v1'; // Restore the v1 as it's needed based on the backend\r\n\r\n/**\r\n * Core API request function with automatic token handling\r\n */\r\nexport async function apiRequest(path, { method = 'GET', body, token, headers = {} } = {}) {\r\n  // Get token from auth utility if not provided explicitly\r\n  const authToken = token || getToken();\r\n  \r\n  // Build headers with auth token if available\r\n  const requestHeaders = { \r\n    'Content-Type': 'application/json',\r\n    ...headers\r\n  };\r\n  \r\n  if (authToken) {\r\n    requestHeaders['Authorization'] = `Bearer ${authToken}`;\r\n  }\r\n\r\n  // Build the full URL\r\n  const url = `${API_BASE}${path}`;\r\n  \r\n  try {\r\n    console.log(`Making ${method} request to ${url}`, {\r\n      method,\r\n      headers: { ...requestHeaders, Authorization: authToken ? 'Bearer [HIDDEN]' : undefined },\r\n      bodyPreview: body ? JSON.stringify(body).substring(0, 100) + (JSON.stringify(body).length > 100 ? '...' : '') : undefined\r\n    });\r\n    \r\n    const response = await fetch(url, {\r\n      method,\r\n      headers: requestHeaders,\r\n      body: body ? JSON.stringify(body) : undefined,\r\n      credentials: 'include', // Include cookies for sessions\r\n    });\r\n\r\n    // Log response status for debugging\r\n    console.log(`Response status: ${response.status} ${response.statusText}`);\r\n    \r\n    // Get the response text first\r\n    const responseText = await response.text();\r\n    \r\n    // Try to parse it as JSON\r\n    let data;\r\n    try {\r\n      data = JSON.parse(responseText);\r\n    } catch (e) {\r\n      console.log(\"Response is not JSON:\", responseText.substring(0, 500) + (responseText.length > 500 ? '...' : ''));\r\n      data = { detail: responseText };\r\n    }\r\n    \r\n    // Log response data for debugging\r\n    console.log(\"Response data preview:\", \r\n      typeof data === 'object' ? \r\n        JSON.stringify(data).substring(0, 200) + (JSON.stringify(data).length > 200 ? '...' : '') \r\n        : data\r\n    );\r\n    \r\n    // Handle API errors\r\n    if (!response.ok) {\r\n      if (response.status === 404) {\r\n        // For 404s, return a standard response instead of throwing\r\n        // This is useful for endpoints that might not exist in development\r\n        if (method === 'GET') {\r\n          console.log(\"Resource not found but handling gracefully\");\r\n          return Array.isArray(data) ? [] : {};\r\n        }\r\n      }\r\n      \r\n      const error = {\r\n        status: response.status,\r\n        data,\r\n        message: data.detail || data.message || `Error ${response.status}: ${response.statusText}`\r\n      };\r\n      \r\n      console.error('API error:', error);\r\n      \r\n      // Special handling for 500 errors to give more details\r\n      if (response.status >= 500) {\r\n        console.error('Server error details:', data);\r\n      }\r\n      \r\n      throw error;\r\n    }\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    // Enhance error with additional info if it's not already our format\r\n    if (!error.status) {\r\n      console.error('API request failed:', error);\r\n      throw {\r\n        status: 0, \r\n        message: error.message || 'Network error, please check your connection',\r\n        data: {}\r\n      };\r\n    }\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Authentication API\r\nexport const authAPI = {\r\n  login: (email, password) => {\r\n    console.log(`Attempting login for email: ${email}`);\r\n    return apiRequest(`${API_PATH}/auth/login`, {\r\n      method: 'POST',\r\n      body: { email, password }  // Match the UserLogin schema which expects email and password\r\n    });\r\n  },\r\n    \r\n  register: (userData) => \r\n    apiRequest(`${API_PATH}/auth/register`, {\r\n      method: 'POST',\r\n      body: userData\r\n    }),\r\n    \r\n  getCurrentUser: () => \r\n    apiRequest(`${API_PATH}/users/me`, {\r\n      method: 'GET'\r\n    }),\r\n    \r\n  updateProfile: (userData) => \r\n    apiRequest(`${API_PATH}/users/me`, {\r\n      method: 'PUT',\r\n      body: userData\r\n    }),\r\n    \r\n  // Google OAuth endpoints\r\n  googleLogin: () => {\r\n    const url = `${API_BASE}${API_PATH}/auth/google/login`;\r\n    console.log(`Redirecting to Google OAuth: ${url}`);\r\n    window.location.href = url;\r\n  },\r\n    \r\n  // This handles the redirect back from Google after authentication\r\n  handleGoogleCallback: async (code) => {\r\n    try {\r\n      console.log('Calling handleGoogleCallback with code:', code);\r\n      const data = await apiRequest(`${API_PATH}/auth/google/token-exchange`, {\r\n        method: 'POST',\r\n        body: { code }\r\n      });\r\n      console.log('Google callback response:', data);\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Google OAuth callback error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n// Clubs API\r\nexport const clubsAPI = {\r\n  getAllClubs: (filters = {}) => {\r\n    // Convert filters object to URL params\r\n    const params = new URLSearchParams();\r\n    Object.entries(filters).forEach(([key, value]) => {\r\n      if (value !== undefined && value !== null && value !== '') {\r\n        params.append(key, value);\r\n      }\r\n    });\r\n    \r\n    const queryString = params.toString() ? `?${params.toString()}` : '';\r\n    \r\n    return apiRequest(`${API_PATH}/clubs${queryString}`);\r\n  },\r\n  \r\n  getClubById: (clubId) => \r\n    apiRequest(`${API_PATH}/clubs/${clubId}`),\r\n    \r\n  createClub: (clubData) => {\r\n    console.log(\"Calling createClub API with data:\", clubData);\r\n    // Make sure the URL matches exactly what the backend expects\r\n    return apiRequest(`${API_PATH}/clubs/`, {  // Add trailing slash to match FastAPI endpoint\r\n      method: 'POST',\r\n      body: clubData\r\n    });\r\n  },\r\n    \r\n  updateClub: (clubId, clubData) => {\r\n    console.log(`Updating club ${clubId} with data:`, clubData);\r\n    return apiRequest(`${API_PATH}/clubs/${clubId}`, {\r\n      method: 'PUT',\r\n      body: clubData\r\n    });\r\n  },\r\n    \r\n  deleteClub: (clubId) => \r\n    apiRequest(`${API_PATH}/clubs/${clubId}`, {\r\n      method: 'DELETE'\r\n    }),\r\n    \r\n  getClubsByOwner: () => \r\n    apiRequest(`${API_PATH}/clubs/my-clubs`),\r\n  \r\n  removePicture: (clubId, pictureUrl) => \r\n    apiRequest(`${API_PATH}/clubs/${clubId}/pictures?picture_url=${encodeURIComponent(pictureUrl)}`, {\r\n      method: 'DELETE'\r\n    }),\r\n    \r\n  joinClub: (clubId) => \r\n    apiRequest(`${API_PATH}/clubs/${clubId}/join`, {\r\n      method: 'POST'\r\n    }),\r\n};\r\n\r\n// Reservations API\r\nexport const reservationsAPI = {\r\n  getMyReservations: async () => {\r\n    try {\r\n      return await apiRequest(`${API_PATH}/reservations/my-reservations`);\r\n    } catch (error) {\r\n      console.log('Reservations API might not be implemented yet:', error);\r\n      // Return empty array instead of throwing when endpoint doesn't exist\r\n      if (error.status === 404 || error.status === 405) {\r\n        return [];\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n    \r\n  createReservation: (reservationData) => {\r\n    console.log(\"Creating reservation with data:\", reservationData);\r\n    return apiRequest(`${API_PATH}/reservations/`, {\r\n      method: 'POST',\r\n      body: reservationData\r\n    });\r\n  },\r\n    \r\n  getAvailableTimeSlots: (clubId, date) => {\r\n    console.log(`Getting available slots for club ${clubId} on date ${date}`);\r\n    return apiRequest(`${API_PATH}/reservations/available-slots/${clubId}?date=${date}`);\r\n  }\r\n};\r\n\r\nexport default {\r\n  apiRequest,\r\n  auth: authAPI,\r\n  clubs: clubsAPI,\r\n  reservations: reservationsAPI\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}