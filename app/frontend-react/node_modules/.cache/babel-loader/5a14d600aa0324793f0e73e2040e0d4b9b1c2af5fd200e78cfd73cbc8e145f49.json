{"ast":null,"code":"var _jsxFileName = \"F:\\\\Diplomna rabota 3\\\\app\\\\frontend-react\\\\src\\\\components\\\\ReservationModal.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { format } from 'date-fns';\nimport { reservationsAPI } from '../utils/api';\nimport { getToken, isAuthenticated } from '../utils/auth';\nimport reservationService from '../utils/reservationService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReservationModal = ({\n  club,\n  isOpen,\n  onClose,\n  isLoggedIn,\n  userData\n}) => {\n  _s();\n  const [date, setDate] = useState(format(new Date(), 'yyyy-MM-dd'));\n  const [timeSlots, setTimeSlots] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState(null);\n  const [duration, setDuration] = useState(1);\n  const [paymentMethod, setPaymentMethod] = useState(isLoggedIn ? \"cash\" : \"card\");\n  const [guestName, setGuestName] = useState(\"\");\n  const [estimatedPrice, setEstimatedPrice] = useState(0);\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const [submitting, setSubmitting] = useState(false);\n\n  // Reset form state when opened\n  useEffect(() => {\n    if (isOpen) {\n      // Clear selections when modal is opened\n      setSelectedTimeSlot(null);\n      setTimeSlots([]);\n      setDate(format(new Date(), 'yyyy-MM-dd'));\n      setDuration(1);\n      setError(\"\");\n      setSuccess(\"\");\n\n      // Refresh login status\n      const authCheck = isAuthenticated();\n      if (isLoggedIn !== authCheck) {\n        console.log(\"Authentication state mismatch, refreshing page\");\n        window.location.reload();\n        return;\n      }\n\n      // Default payment method\n      setPaymentMethod(authCheck ? \"cash\" : \"card\");\n\n      // Initialize booked slots storage if needed\n      try {\n        if (!sessionStorage.getItem('bookedTimeSlots')) {\n          sessionStorage.setItem('bookedTimeSlots', JSON.stringify([]));\n          console.log(\"Initialized booked time slots session storage\");\n        }\n      } catch (error) {\n        console.error(\"Error initializing session storage:\", error);\n      }\n    }\n  }, [isOpen, isLoggedIn]);\n\n  // Calculate estimated price whenever duration or club changes\n  useEffect(() => {\n    if (club && duration) {\n      setEstimatedPrice(parseFloat(club.hourly_price) * parseFloat(duration));\n    }\n\n    // When duration changes, we need to update which slots are available\n    if (duration && timeSlots.length > 0) {\n      updateAvailableSlotsForDuration();\n    }\n  }, [club, duration, timeSlots.length]);\n\n  // Refetch time slots when date changes\n  useEffect(() => {\n    if (isOpen && club && date) {\n      // Clear the selected time slot when date changes\n      setSelectedTimeSlot(null);\n      fetchAvailableTimeSlots();\n    }\n  }, [date, club, isOpen]);\n\n  // Add a function to update available slots based on duration\n  const updateAvailableSlotsForDuration = () => {\n    if (!timeSlots.length) return;\n\n    // Make a copy of the original time slots\n    const originalSlots = [...timeSlots];\n    const durationHours = parseInt(duration);\n\n    // Create a new array with updated availability based on the duration\n    const updatedSlots = originalSlots.map((slot, index) => {\n      // If already unavailable, keep it that way\n      if (!slot.is_available) {\n        return slot;\n      }\n\n      // Check if there are enough consecutive available slots after this one\n      let hasEnoughSlots = true;\n      // We need to check all slots within our duration (except the current one)\n      for (let i = 1; i < durationHours; i++) {\n        // If we're at the end of available slots or the next slot isn't available, mark as unavailable\n        if (index + i >= originalSlots.length || !originalSlots[index + i].is_available) {\n          hasEnoughSlots = false;\n          break;\n        }\n      }\n      return {\n        ...slot,\n        is_available: hasEnoughSlots\n      };\n    });\n    console.log(`Updated availability for duration ${durationHours} hours:`, updatedSlots.filter(s => s.is_available).map(s => s.start_time));\n    setTimeSlots(updatedSlots);\n  };\n  const fetchAvailableTimeSlots = async () => {\n    setLoading(true);\n    setError(\"\");\n    setSelectedTimeSlot(null); // Clear selection when fetching new slots\n\n    try {\n      console.log(`Fetching available slots for club ${club.id} on date ${date}`);\n      const data = await reservationService.getAvailableTimeSlots(club.id, date);\n      console.log(\"Available time slots:\", data);\n\n      // Make a deep copy to avoid reference issues with the array\n      if (Array.isArray(data)) {\n        // Sort time slots by time for better UI presentation\n        const sortedData = [...data].sort((a, b) => {\n          // Convert time strings to comparable values (e.g., '14:00' to 1400)\n          const timeA = parseInt(a.start_time.replace(':', ''));\n          const timeB = parseInt(b.start_time.replace(':', ''));\n          return timeA - timeB;\n        });\n\n        // Apply any slots booked during this session that might not be\n        // reflected in the backend response yet\n        let bookedSlots = [];\n        try {\n          // Try to get previously booked slots from sessionStorage\n          const savedBookedSlots = sessionStorage.getItem('bookedTimeSlots');\n          if (savedBookedSlots) {\n            bookedSlots = JSON.parse(savedBookedSlots);\n            console.log(\"Found previously booked slots in session:\", bookedSlots);\n\n            // Filter slots relevant to this club and date\n            const relevantBookedSlots = bookedSlots.filter(slot => slot.clubId === club.id && slot.date === date).map(slot => slot.time);\n            if (relevantBookedSlots.length > 0) {\n              console.log(\"Applying booked slots from session to UI:\", relevantBookedSlots);\n\n              // Mark booked slots as unavailable\n              const updatedWithBookedSlots = sortedData.map(slot => {\n                if (relevantBookedSlots.includes(slot.start_time)) {\n                  return {\n                    ...slot,\n                    is_available: false\n                  };\n                }\n                return slot;\n              });\n\n              // Now check duration-based availability\n              setTimeSlots(updatedWithBookedSlots);\n\n              // Need to delay to ensure the state is updated\n              setTimeout(() => {\n                updateAvailableSlotsForDuration();\n              }, 0);\n              setLoading(false);\n              return;\n            }\n          }\n        } catch (error) {\n          console.error(\"Error reading booked slots from session:\", error);\n        }\n\n        // If no session booked slots or error, just use the sorted data\n        setTimeSlots(sortedData);\n\n        // Update availability based on duration after state is updated\n        setTimeout(() => {\n          updateAvailableSlotsForDuration();\n        }, 0);\n      } else {\n        setTimeSlots([]);\n      }\n    } catch (error) {\n      console.error(\"Error fetching time slots:\", error);\n      setError(error.message || \"An error occurred while fetching available time slots\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError(\"\");\n    setSuccess(\"\");\n    setSubmitting(true);\n    console.log(\"Reservation form submitted\");\n\n    // Validation\n    if (!selectedTimeSlot) {\n      setError(\"Please select a time slot\");\n      setSubmitting(false);\n      return;\n    }\n    if (!isLoggedIn && !guestName) {\n      setError(\"Please enter your name for the reservation\");\n      setSubmitting(false);\n      return;\n    }\n    if (!isLoggedIn && paymentMethod === \"cash\") {\n      setError(\"Non-logged in users can only pay by card\");\n      setSubmitting(false);\n      return;\n    }\n\n    // Re-check if the time slot is still available\n    try {\n      // Refresh available slots right before submitting\n      const updatedSlots = await reservationService.getAvailableTimeSlots(club.id, date);\n\n      // Sort the slots and extract start times\n      const sortedSlots = [...updatedSlots].sort((a, b) => {\n        return parseInt(a.start_time.replace(':', '')) - parseInt(b.start_time.replace(':', ''));\n      });\n\n      // Get the selected slot and check if it's still available\n      const selectedSlotIndex = sortedSlots.findIndex(slot => slot.start_time === selectedTimeSlot.start_time);\n      if (selectedSlotIndex === -1 || !sortedSlots[selectedSlotIndex].is_available) {\n        setError(\"This time slot is no longer available. Please select a different time.\");\n        setSelectedTimeSlot(null);\n        setTimeSlots(sortedSlots);\n        updateAvailableSlotsForDuration();\n        setSubmitting(false);\n        return;\n      }\n\n      // For multi-hour durations, check that we have enough consecutive slots\n      const durationHours = parseInt(duration);\n      if (durationHours > 1) {\n        let hasEnoughSlots = true;\n        for (let i = 1; i < durationHours; i++) {\n          if (selectedSlotIndex + i >= sortedSlots.length || !sortedSlots[selectedSlotIndex + i].is_available) {\n            hasEnoughSlots = false;\n            break;\n          }\n        }\n        if (!hasEnoughSlots) {\n          setError(`Not enough available consecutive slots for ${durationHours} hour duration.`);\n          setSubmitting(false);\n          return;\n        }\n      }\n    } catch (error) {\n      console.error(\"Error checking time slot availability:\", error);\n      // Continue with reservation attempt\n    }\n\n    // Authentication validation\n    if (isLoggedIn) {\n      const token = getToken();\n      if (!token) {\n        setError(\"Your session has expired. Please log in again.\");\n        setSubmitting(false);\n        return;\n      }\n\n      // Verify token is still valid with backend\n      try {\n        const response = await fetch(`http://localhost:8000/api/v1/users/me`, {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        if (!response.ok) {\n          console.error(\"Token validation failed:\", response.status);\n          setError(\"Your session is invalid. Please log in again.\");\n          setSubmitting(false);\n          localStorage.removeItem('token');\n          localStorage.removeItem('isAuthenticated');\n          return;\n        }\n      } catch (error) {\n        console.error(\"Token validation request failed:\", error);\n        setError(\"Could not verify your session. Please try again.\");\n        setSubmitting(false);\n        return;\n      }\n    }\n\n    // Prepare reservation data for the backend\n    const reservationData = {\n      club_id: club.id,\n      reservation_time: selectedTimeSlot.start_time,\n      // Send as \"HH:MM\" format\n      date: date,\n      // Send date separately - backend expects this format\n      duration: parseFloat(duration),\n      payment_method: paymentMethod\n    };\n\n    // Add guest name for non-logged in users\n    if (!isLoggedIn) {\n      reservationData.guest_name = guestName;\n    }\n    console.log(\"Reservation data:\", reservationData);\n    try {\n      const data = await reservationService.createReservation(reservationData);\n      console.log(\"Reservation created successfully:\", data);\n\n      // Save the successfully booked time slot\n      const bookedSlot = selectedTimeSlot.start_time;\n\n      // Show success message\n      setSuccess(`Reservation created successfully for ${bookedSlot} (${duration} hour${duration > 1 ? 's' : ''})!`);\n\n      // Permanently mark the reserved slot(s) as unavailable in the current UI\n      const updatedSlots = timeSlots.map(slot => {\n        // For multi-hour reservations, check all affected slots\n        const slotHour = parseInt(slot.start_time.split(':')[0]);\n        const startHour = parseInt(selectedTimeSlot.start_time.split(':')[0]);\n\n        // Check if this slot is within the reserved time range\n        if (slotHour >= startHour && slotHour < startHour + parseInt(duration)) {\n          // Mark as permanently unavailable\n          return {\n            ...slot,\n            is_available: false,\n            is_permanently_booked: true\n          };\n        }\n        return slot;\n      });\n\n      // Update the UI immediately with permanent changes\n      setTimeSlots(updatedSlots);\n\n      // Reset form fields\n      setSelectedTimeSlot(null);\n      setDuration(1);\n      setPaymentMethod(isLoggedIn ? \"cash\" : \"card\");\n      setGuestName(\"\");\n\n      // Store the booked time slots in session for other components or page refreshes\n      try {\n        // Get existing booked slots\n        let bookedSlots = [];\n        const savedBookedSlots = sessionStorage.getItem('bookedTimeSlots');\n        if (savedBookedSlots) {\n          bookedSlots = JSON.parse(savedBookedSlots);\n        }\n\n        // Add new booked slots (for multi-hour reservations)\n        const startHour = parseInt(selectedTimeSlot.start_time.split(':')[0]);\n        for (let i = 0; i < parseInt(duration); i++) {\n          const hourToAdd = startHour + i;\n          const timeString = `${hourToAdd.toString().padStart(2, '0')}:00`;\n          bookedSlots.push({\n            clubId: club.id,\n            date: date,\n            time: timeString,\n            permanent: true // Mark as permanently booked\n          });\n        }\n\n        // Save to session storage\n        sessionStorage.setItem('bookedTimeSlots', JSON.stringify(bookedSlots));\n      } catch (error) {\n        console.error(\"Error saving booked slots to session:\", error);\n      }\n\n      // Don't refresh time slots from server, so permanent changes remain\n      // This ensures the UI keeps showing booked slots as unavailable\n    } catch (error) {\n      console.error(\"Error creating reservation:\", error);\n      if (error.status === 401) {\n        setError(\"You must be logged in to make a reservation. Please log in and try again.\");\n      } else if (error.status === 400 && error.message && error.message.includes(\"time slot is already booked\")) {\n        setError(\"This time slot is no longer available. Please select a different time.\");\n        // Refresh available slots to show updated availability\n        fetchAvailableTimeSlots();\n      } else {\n        setError(error.message || \"An error occurred during reservation creation\");\n      }\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  // Function to handle date changes\n  const handleDateChange = e => {\n    const newDate = e.target.value;\n    // Clear selected time slot when date changes\n    setSelectedTimeSlot(null);\n    setTimeSlots([]);\n    setDate(newDate);\n  };\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-gray-900 rounded-lg p-6 w-full max-w-md max-h-[80vh] overflow-y-auto scrollbar-thin scrollbar-thumb-gray-600 scrollbar-track-gray-800\",\n      style: {\n        maxHeight: \"calc(100vh - 100px)\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sticky top-0 bg-gray-900 pt-1 pb-3 border-b border-gray-700 mb-4 flex justify-between items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold text-gray-100\",\n          children: [\"Reserve \", club.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          className: \"text-gray-400 hover:text-white rounded-full hover:bg-gray-800 p-1 transition-colors\",\n          children: /*#__PURE__*/_jsxDEV(\"svg\", {\n            xmlns: \"http://www.w3.org/2000/svg\",\n            className: \"h-6 w-6\",\n            fill: \"none\",\n            viewBox: \"0 0 24 24\",\n            stroke: \"currentColor\",\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              strokeLinecap: \"round\",\n              strokeLinejoin: \"round\",\n              strokeWidth: 2,\n              d: \"M6 18L18 6M6 6l12 12\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 421,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-red-900/50 text-white p-3 rounded mb-4 border border-red-800\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 11\n      }, this), success && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-green-900/50 text-white p-3 rounded mb-4 border border-green-800\",\n        children: success\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"space-y-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"reservation-date\",\n            className: \"block text-sm font-medium text-gray-300 mb-1\",\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"reservation-date\",\n            type: \"date\",\n            value: date,\n            onChange: handleDateChange,\n            min: format(new Date(), 'yyyy-MM-dd'),\n            className: \"w-full p-3 bg-gray-800 text-white rounded border border-gray-700 focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-300 mb-1\",\n            children: \"Available Time Slots\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 13\n          }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex justify-center py-4\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"animate-spin rounded-full h-6 w-6 border-t-2 border-b-2 border-blue-500\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 460,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 15\n          }, this) : timeSlots.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-3 gap-2 mt-2\",\n            children: timeSlots.map((slot, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              disabled: !slot.is_available,\n              onClick: () => setSelectedTimeSlot(slot),\n              className: `py-2 px-3 rounded text-center text-sm transition-colors ${selectedTimeSlot === slot ? 'bg-blue-600 text-white' : slot.is_available ? 'bg-gray-800 text-white hover:bg-gray-700' : 'bg-gray-900 text-gray-500 cursor-not-allowed border border-gray-800'}`,\n              children: slot.start_time\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-gray-800/50 border border-gray-700 rounded p-3 text-center\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-gray-400 text-sm\",\n              children: \"No time slots available for this date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 484,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"duration\",\n            className: \"block text-sm font-medium text-gray-300 mb-1\",\n            children: \"Duration (hours)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"duration\",\n            value: duration,\n            onChange: e => setDuration(e.target.value),\n            className: \"w-full p-3 bg-gray-800 text-white rounded border border-gray-700 focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500\",\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"1\",\n              children: \"1 hour\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 500,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"2\",\n              children: \"2 hours\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 501,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"3\",\n              children: \"3 hours\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 502,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"4\",\n              children: \"4 hours\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 503,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-300 mb-1\",\n            children: \"Payment Method\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 508,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex space-x-4 mt-1\",\n            children: [isLoggedIn && /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"inline-flex items-center rounded p-2 bg-gray-800 hover:bg-gray-700 transition-colors cursor-pointer\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                value: \"cash\",\n                checked: paymentMethod === \"cash\",\n                onChange: () => setPaymentMethod(\"cash\"),\n                className: \"text-blue-600\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 514,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"ml-2 text-gray-300\",\n                children: \"Cash\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 521,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 513,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"inline-flex items-center rounded p-2 bg-gray-800 hover:bg-gray-700 transition-colors cursor-pointer\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                value: \"card\",\n                checked: paymentMethod === \"card\",\n                onChange: () => setPaymentMethod(\"card\"),\n                className: \"text-blue-600\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 525,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"ml-2 text-gray-300\",\n                children: \"Card\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 532,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 524,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 511,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 11\n        }, this), !isLoggedIn && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"guest-name\",\n            className: \"block text-sm font-medium text-gray-300 mb-1\",\n            children: \"Your Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"guest-name\",\n            type: \"text\",\n            value: guestName,\n            onChange: e => setGuestName(e.target.value),\n            className: \"w-full p-3 bg-gray-800 text-white rounded border border-gray-700 focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500\",\n            placeholder: \"Enter your name\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 542,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-400 mt-1\",\n            children: \"Required for non-logged in users\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4 mb-5\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-gray-800/70 p-4 rounded border border-gray-700\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex justify-between items-center\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-gray-300\",\n                children: \"Estimated Price:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 558,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-xl font-semibold text-blue-400\",\n                children: [\"$\", estimatedPrice.toFixed(2)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 559,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 557,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm text-gray-400 mt-1\",\n              children: [\"Based on \", duration, \" hour\", duration !== 1 ? 's' : '', \" at $\", club.hourly_price, \"/hour\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 561,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 556,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-end space-x-3 pt-2 border-t border-gray-700\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: onClose,\n            className: \"px-5 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded transition-colors\",\n            disabled: submitting,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 568,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"px-5 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded transition-colors\",\n            disabled: submitting || !selectedTimeSlot || !isLoggedIn && !guestName,\n            children: submitting ? 'Reserving...' : 'Reserve'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 576,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 412,\n    columnNumber: 5\n  }, this);\n};\n_s(ReservationModal, \"tG36/6m3Jp4MC3mW2NnvZNynQLA=\");\n_c = ReservationModal;\nexport default ReservationModal;\nvar _c;\n$RefreshReg$(_c, \"ReservationModal\");","map":{"version":3,"names":["React","useState","useEffect","format","reservationsAPI","getToken","isAuthenticated","reservationService","jsxDEV","_jsxDEV","ReservationModal","club","isOpen","onClose","isLoggedIn","userData","_s","date","setDate","Date","timeSlots","setTimeSlots","loading","setLoading","selectedTimeSlot","setSelectedTimeSlot","duration","setDuration","paymentMethod","setPaymentMethod","guestName","setGuestName","estimatedPrice","setEstimatedPrice","error","setError","success","setSuccess","submitting","setSubmitting","authCheck","console","log","window","location","reload","sessionStorage","getItem","setItem","JSON","stringify","parseFloat","hourly_price","length","updateAvailableSlotsForDuration","fetchAvailableTimeSlots","originalSlots","durationHours","parseInt","updatedSlots","map","slot","index","is_available","hasEnoughSlots","i","filter","s","start_time","id","data","getAvailableTimeSlots","Array","isArray","sortedData","sort","a","b","timeA","replace","timeB","bookedSlots","savedBookedSlots","parse","relevantBookedSlots","clubId","time","updatedWithBookedSlots","includes","setTimeout","message","handleSubmit","e","preventDefault","sortedSlots","selectedSlotIndex","findIndex","token","response","fetch","method","headers","ok","status","localStorage","removeItem","reservationData","club_id","reservation_time","payment_method","guest_name","createReservation","bookedSlot","slotHour","split","startHour","is_permanently_booked","hourToAdd","timeString","toString","padStart","push","permanent","handleDateChange","newDate","target","value","className","children","style","maxHeight","name","fileName","_jsxFileName","lineNumber","columnNumber","onClick","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","onSubmit","htmlFor","type","onChange","min","required","disabled","checked","placeholder","toFixed","_c","$RefreshReg$"],"sources":["F:/Diplomna rabota 3/app/frontend-react/src/components/ReservationModal.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { format } from 'date-fns';\r\nimport { reservationsAPI } from '../utils/api';\r\nimport { getToken, isAuthenticated } from '../utils/auth';\r\nimport reservationService from '../utils/reservationService';\r\n\r\nconst ReservationModal = ({ club, isOpen, onClose, isLoggedIn, userData }) => {\r\n  const [date, setDate] = useState(format(new Date(), 'yyyy-MM-dd'));\r\n  const [timeSlots, setTimeSlots] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState(null);\r\n  const [duration, setDuration] = useState(1);\r\n  const [paymentMethod, setPaymentMethod] = useState(isLoggedIn ? \"cash\" : \"card\");\r\n  const [guestName, setGuestName] = useState(\"\");\r\n  const [estimatedPrice, setEstimatedPrice] = useState(0);\r\n  const [error, setError] = useState(\"\");\r\n  const [success, setSuccess] = useState(\"\");\r\n  const [submitting, setSubmitting] = useState(false);\r\n  \r\n  // Reset form state when opened\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      // Clear selections when modal is opened\r\n      setSelectedTimeSlot(null);\r\n      setTimeSlots([]);\r\n      setDate(format(new Date(), 'yyyy-MM-dd'));\r\n      setDuration(1);\r\n      setError(\"\");\r\n      setSuccess(\"\");\r\n      \r\n      // Refresh login status\r\n      const authCheck = isAuthenticated();\r\n      if (isLoggedIn !== authCheck) {\r\n        console.log(\"Authentication state mismatch, refreshing page\");\r\n        window.location.reload();\r\n        return;\r\n      }\r\n      \r\n      // Default payment method\r\n      setPaymentMethod(authCheck ? \"cash\" : \"card\");\r\n      \r\n      // Initialize booked slots storage if needed\r\n      try {\r\n        if (!sessionStorage.getItem('bookedTimeSlots')) {\r\n          sessionStorage.setItem('bookedTimeSlots', JSON.stringify([]));\r\n          console.log(\"Initialized booked time slots session storage\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error initializing session storage:\", error);\r\n      }\r\n    }\r\n  }, [isOpen, isLoggedIn]);\r\n  \r\n  // Calculate estimated price whenever duration or club changes\r\n  useEffect(() => {\r\n    if (club && duration) {\r\n      setEstimatedPrice(parseFloat(club.hourly_price) * parseFloat(duration));\r\n    }\r\n    \r\n    // When duration changes, we need to update which slots are available\r\n    if (duration && timeSlots.length > 0) {\r\n      updateAvailableSlotsForDuration();\r\n    }\r\n  }, [club, duration, timeSlots.length]);\r\n\r\n  // Refetch time slots when date changes\r\n  useEffect(() => {\r\n    if (isOpen && club && date) {\r\n      // Clear the selected time slot when date changes\r\n      setSelectedTimeSlot(null);\r\n      fetchAvailableTimeSlots();\r\n    }\r\n  }, [date, club, isOpen]);\r\n  \r\n  // Add a function to update available slots based on duration\r\n  const updateAvailableSlotsForDuration = () => {\r\n    if (!timeSlots.length) return;\r\n    \r\n    // Make a copy of the original time slots\r\n    const originalSlots = [...timeSlots];\r\n    const durationHours = parseInt(duration);\r\n    \r\n    // Create a new array with updated availability based on the duration\r\n    const updatedSlots = originalSlots.map((slot, index) => {\r\n      // If already unavailable, keep it that way\r\n      if (!slot.is_available) {\r\n        return slot;\r\n      }\r\n      \r\n      // Check if there are enough consecutive available slots after this one\r\n      let hasEnoughSlots = true;\r\n      // We need to check all slots within our duration (except the current one)\r\n      for (let i = 1; i < durationHours; i++) {\r\n        // If we're at the end of available slots or the next slot isn't available, mark as unavailable\r\n        if (index + i >= originalSlots.length || !originalSlots[index + i].is_available) {\r\n          hasEnoughSlots = false;\r\n          break;\r\n        }\r\n      }\r\n      \r\n      return {\r\n        ...slot,\r\n        is_available: hasEnoughSlots\r\n      };\r\n    });\r\n    \r\n    console.log(`Updated availability for duration ${durationHours} hours:`, \r\n      updatedSlots.filter(s => s.is_available).map(s => s.start_time));\r\n    \r\n    setTimeSlots(updatedSlots);\r\n  };\r\n  \r\n  const fetchAvailableTimeSlots = async () => {\r\n    setLoading(true);\r\n    setError(\"\");\r\n    setSelectedTimeSlot(null); // Clear selection when fetching new slots\r\n    \r\n    try {\r\n      console.log(`Fetching available slots for club ${club.id} on date ${date}`);\r\n      const data = await reservationService.getAvailableTimeSlots(club.id, date);\r\n      console.log(\"Available time slots:\", data);\r\n      \r\n      // Make a deep copy to avoid reference issues with the array\r\n      if (Array.isArray(data)) {\r\n        // Sort time slots by time for better UI presentation\r\n        const sortedData = [...data].sort((a, b) => {\r\n          // Convert time strings to comparable values (e.g., '14:00' to 1400)\r\n          const timeA = parseInt(a.start_time.replace(':', ''));\r\n          const timeB = parseInt(b.start_time.replace(':', ''));\r\n          return timeA - timeB;\r\n        });\r\n        \r\n        // Apply any slots booked during this session that might not be\r\n        // reflected in the backend response yet\r\n        let bookedSlots = [];\r\n        try {\r\n          // Try to get previously booked slots from sessionStorage\r\n          const savedBookedSlots = sessionStorage.getItem('bookedTimeSlots');\r\n          if (savedBookedSlots) {\r\n            bookedSlots = JSON.parse(savedBookedSlots);\r\n            console.log(\"Found previously booked slots in session:\", bookedSlots);\r\n            \r\n            // Filter slots relevant to this club and date\r\n            const relevantBookedSlots = bookedSlots.filter(slot => \r\n              slot.clubId === club.id && slot.date === date\r\n            ).map(slot => slot.time);\r\n            \r\n            if (relevantBookedSlots.length > 0) {\r\n              console.log(\"Applying booked slots from session to UI:\", relevantBookedSlots);\r\n              \r\n              // Mark booked slots as unavailable\r\n              const updatedWithBookedSlots = sortedData.map(slot => {\r\n                if (relevantBookedSlots.includes(slot.start_time)) {\r\n                  return { ...slot, is_available: false };\r\n                }\r\n                return slot;\r\n              });\r\n              \r\n              // Now check duration-based availability\r\n              setTimeSlots(updatedWithBookedSlots);\r\n              \r\n              // Need to delay to ensure the state is updated\r\n              setTimeout(() => {\r\n                updateAvailableSlotsForDuration();\r\n              }, 0);\r\n              \r\n              setLoading(false);\r\n              return;\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error reading booked slots from session:\", error);\r\n        }\r\n        \r\n        // If no session booked slots or error, just use the sorted data\r\n        setTimeSlots(sortedData);\r\n        \r\n        // Update availability based on duration after state is updated\r\n        setTimeout(() => {\r\n          updateAvailableSlotsForDuration();\r\n        }, 0);\r\n      } else {\r\n        setTimeSlots([]);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching time slots:\", error);\r\n      setError(error.message || \"An error occurred while fetching available time slots\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError(\"\");\r\n    setSuccess(\"\");\r\n    setSubmitting(true);\r\n    \r\n    console.log(\"Reservation form submitted\");\r\n    \r\n    // Validation\r\n    if (!selectedTimeSlot) {\r\n      setError(\"Please select a time slot\");\r\n      setSubmitting(false);\r\n      return;\r\n    }\r\n    \r\n    if (!isLoggedIn && !guestName) {\r\n      setError(\"Please enter your name for the reservation\");\r\n      setSubmitting(false);\r\n      return;\r\n    }\r\n    \r\n    if (!isLoggedIn && paymentMethod === \"cash\") {\r\n      setError(\"Non-logged in users can only pay by card\");\r\n      setSubmitting(false);\r\n      return;\r\n    }\r\n    \r\n    // Re-check if the time slot is still available\r\n    try {\r\n      // Refresh available slots right before submitting\r\n      const updatedSlots = await reservationService.getAvailableTimeSlots(club.id, date);\r\n      \r\n      // Sort the slots and extract start times\r\n      const sortedSlots = [...updatedSlots].sort((a, b) => {\r\n        return parseInt(a.start_time.replace(':', '')) - parseInt(b.start_time.replace(':', ''));\r\n      });\r\n      \r\n      // Get the selected slot and check if it's still available\r\n      const selectedSlotIndex = sortedSlots.findIndex(\r\n        slot => slot.start_time === selectedTimeSlot.start_time\r\n      );\r\n      \r\n      if (selectedSlotIndex === -1 || !sortedSlots[selectedSlotIndex].is_available) {\r\n        setError(\"This time slot is no longer available. Please select a different time.\");\r\n        setSelectedTimeSlot(null);\r\n        setTimeSlots(sortedSlots);\r\n        updateAvailableSlotsForDuration();\r\n        setSubmitting(false);\r\n        return;\r\n      }\r\n      \r\n      // For multi-hour durations, check that we have enough consecutive slots\r\n      const durationHours = parseInt(duration);\r\n      if (durationHours > 1) {\r\n        let hasEnoughSlots = true;\r\n        for (let i = 1; i < durationHours; i++) {\r\n          if (\r\n            selectedSlotIndex + i >= sortedSlots.length || \r\n            !sortedSlots[selectedSlotIndex + i].is_available\r\n          ) {\r\n            hasEnoughSlots = false;\r\n            break;\r\n          }\r\n        }\r\n        \r\n        if (!hasEnoughSlots) {\r\n          setError(`Not enough available consecutive slots for ${durationHours} hour duration.`);\r\n          setSubmitting(false);\r\n          return;\r\n        }\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error checking time slot availability:\", error);\r\n      // Continue with reservation attempt\r\n    }\r\n    \r\n    // Authentication validation\r\n    if (isLoggedIn) {\r\n      const token = getToken();\r\n      if (!token) {\r\n        setError(\"Your session has expired. Please log in again.\");\r\n        setSubmitting(false);\r\n        return;\r\n      }\r\n      \r\n      // Verify token is still valid with backend\r\n      try {\r\n        const response = await fetch(`http://localhost:8000/api/v1/users/me`, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Authorization': `Bearer ${token}`\r\n          }\r\n        });\r\n        \r\n        if (!response.ok) {\r\n          console.error(\"Token validation failed:\", response.status);\r\n          setError(\"Your session is invalid. Please log in again.\");\r\n          setSubmitting(false);\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('isAuthenticated');\r\n          return;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Token validation request failed:\", error);\r\n        setError(\"Could not verify your session. Please try again.\");\r\n        setSubmitting(false);\r\n        return;\r\n      }\r\n    }\r\n    \r\n    // Prepare reservation data for the backend\r\n    const reservationData = {\r\n      club_id: club.id,\r\n      reservation_time: selectedTimeSlot.start_time, // Send as \"HH:MM\" format\r\n      date: date, // Send date separately - backend expects this format\r\n      duration: parseFloat(duration),\r\n      payment_method: paymentMethod\r\n    };\r\n    \r\n    // Add guest name for non-logged in users\r\n    if (!isLoggedIn) {\r\n      reservationData.guest_name = guestName;\r\n    }\r\n    \r\n    console.log(\"Reservation data:\", reservationData);\r\n    \r\n    try {\r\n      const data = await reservationService.createReservation(reservationData);\r\n      console.log(\"Reservation created successfully:\", data);\r\n      \r\n      // Save the successfully booked time slot\r\n      const bookedSlot = selectedTimeSlot.start_time;\r\n      \r\n      // Show success message\r\n      setSuccess(`Reservation created successfully for ${bookedSlot} (${duration} hour${duration > 1 ? 's' : ''})!`);\r\n      \r\n      // Permanently mark the reserved slot(s) as unavailable in the current UI\r\n      const updatedSlots = timeSlots.map(slot => {\r\n        // For multi-hour reservations, check all affected slots\r\n        const slotHour = parseInt(slot.start_time.split(':')[0]);\r\n        const startHour = parseInt(selectedTimeSlot.start_time.split(':')[0]);\r\n        \r\n        // Check if this slot is within the reserved time range\r\n        if (slotHour >= startHour && slotHour < startHour + parseInt(duration)) {\r\n          // Mark as permanently unavailable\r\n          return { ...slot, is_available: false, is_permanently_booked: true };\r\n        }\r\n        return slot;\r\n      });\r\n      \r\n      // Update the UI immediately with permanent changes\r\n      setTimeSlots(updatedSlots);\r\n      \r\n      // Reset form fields\r\n      setSelectedTimeSlot(null);\r\n      setDuration(1);\r\n      setPaymentMethod(isLoggedIn ? \"cash\" : \"card\");\r\n      setGuestName(\"\");\r\n      \r\n      // Store the booked time slots in session for other components or page refreshes\r\n      try {\r\n        // Get existing booked slots\r\n        let bookedSlots = [];\r\n        const savedBookedSlots = sessionStorage.getItem('bookedTimeSlots');\r\n        if (savedBookedSlots) {\r\n          bookedSlots = JSON.parse(savedBookedSlots);\r\n        }\r\n        \r\n        // Add new booked slots (for multi-hour reservations)\r\n        const startHour = parseInt(selectedTimeSlot.start_time.split(':')[0]);\r\n        for (let i = 0; i < parseInt(duration); i++) {\r\n          const hourToAdd = startHour + i;\r\n          const timeString = `${hourToAdd.toString().padStart(2, '0')}:00`;\r\n          \r\n          bookedSlots.push({\r\n            clubId: club.id,\r\n            date: date,\r\n            time: timeString,\r\n            permanent: true // Mark as permanently booked\r\n          });\r\n        }\r\n        \r\n        // Save to session storage\r\n        sessionStorage.setItem('bookedTimeSlots', JSON.stringify(bookedSlots));\r\n      } catch (error) {\r\n        console.error(\"Error saving booked slots to session:\", error);\r\n      }\r\n      \r\n      // Don't refresh time slots from server, so permanent changes remain\r\n      // This ensures the UI keeps showing booked slots as unavailable\r\n    } catch (error) {\r\n      console.error(\"Error creating reservation:\", error);\r\n      if (error.status === 401) {\r\n        setError(\"You must be logged in to make a reservation. Please log in and try again.\");\r\n      } else if (error.status === 400 && error.message && error.message.includes(\"time slot is already booked\")) {\r\n        setError(\"This time slot is no longer available. Please select a different time.\");\r\n        // Refresh available slots to show updated availability\r\n        fetchAvailableTimeSlots();\r\n      } else {\r\n        setError(error.message || \"An error occurred during reservation creation\");\r\n      }\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n  \r\n  // Function to handle date changes\r\n  const handleDateChange = (e) => {\r\n    const newDate = e.target.value;\r\n    // Clear selected time slot when date changes\r\n    setSelectedTimeSlot(null);\r\n    setTimeSlots([]);\r\n    setDate(newDate);\r\n  };\r\n  \r\n  if (!isOpen) return null;\r\n  \r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50\">\r\n      <div className=\"bg-gray-900 rounded-lg p-6 w-full max-w-md max-h-[80vh] overflow-y-auto scrollbar-thin scrollbar-thumb-gray-600 scrollbar-track-gray-800\" style={{ maxHeight: \"calc(100vh - 100px)\" }}>\r\n        <div className=\"sticky top-0 bg-gray-900 pt-1 pb-3 border-b border-gray-700 mb-4 flex justify-between items-center\">\r\n          <h2 className=\"text-xl font-semibold text-gray-100\">Reserve {club.name}</h2>\r\n          <button \r\n            onClick={onClose}\r\n            className=\"text-gray-400 hover:text-white rounded-full hover:bg-gray-800 p-1 transition-colors\"\r\n          >\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n        \r\n        {error && (\r\n          <div className=\"bg-red-900/50 text-white p-3 rounded mb-4 border border-red-800\">\r\n            {error}\r\n          </div>\r\n        )}\r\n        \r\n        {success && (\r\n          <div className=\"bg-green-900/50 text-white p-3 rounded mb-4 border border-green-800\">\r\n            {success}\r\n          </div>\r\n        )}\r\n        \r\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"reservation-date\" className=\"block text-sm font-medium text-gray-300 mb-1\">\r\n              Date\r\n            </label>\r\n            <input\r\n              id=\"reservation-date\"\r\n              type=\"date\"\r\n              value={date}\r\n              onChange={handleDateChange}\r\n              min={format(new Date(), 'yyyy-MM-dd')}\r\n              className=\"w-full p-3 bg-gray-800 text-white rounded border border-gray-700 focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500\"\r\n              required\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"form-group\">\r\n            <label className=\"block text-sm font-medium text-gray-300 mb-1\">\r\n              Available Time Slots\r\n            </label>\r\n            {loading ? (\r\n              <div className=\"flex justify-center py-4\">\r\n                <div className=\"animate-spin rounded-full h-6 w-6 border-t-2 border-b-2 border-blue-500\"></div>\r\n              </div>\r\n            ) : timeSlots.length > 0 ? (\r\n              <div className=\"grid grid-cols-3 gap-2 mt-2\">\r\n                {timeSlots.map((slot, index) => (\r\n                  <button\r\n                    key={index}\r\n                    type=\"button\"\r\n                    disabled={!slot.is_available}\r\n                    onClick={() => setSelectedTimeSlot(slot)}\r\n                    className={`py-2 px-3 rounded text-center text-sm transition-colors ${\r\n                      selectedTimeSlot === slot\r\n                        ? 'bg-blue-600 text-white'\r\n                        : slot.is_available\r\n                        ? 'bg-gray-800 text-white hover:bg-gray-700'\r\n                        : 'bg-gray-900 text-gray-500 cursor-not-allowed border border-gray-800'\r\n                    }`}\r\n                  >\r\n                    {slot.start_time}\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            ) : (\r\n              <div className=\"bg-gray-800/50 border border-gray-700 rounded p-3 text-center\">\r\n                <p className=\"text-gray-400 text-sm\">No time slots available for this date</p>\r\n              </div>\r\n            )}\r\n          </div>\r\n          \r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"duration\" className=\"block text-sm font-medium text-gray-300 mb-1\">\r\n              Duration (hours)\r\n            </label>\r\n            <select\r\n              id=\"duration\"\r\n              value={duration}\r\n              onChange={(e) => setDuration(e.target.value)}\r\n              className=\"w-full p-3 bg-gray-800 text-white rounded border border-gray-700 focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500\"\r\n              required\r\n            >\r\n              <option value=\"1\">1 hour</option>\r\n              <option value=\"2\">2 hours</option>\r\n              <option value=\"3\">3 hours</option>\r\n              <option value=\"4\">4 hours</option>\r\n            </select>\r\n          </div>\r\n          \r\n          <div className=\"form-group\">\r\n            <label className=\"block text-sm font-medium text-gray-300 mb-1\">\r\n              Payment Method\r\n            </label>\r\n            <div className=\"flex space-x-4 mt-1\">\r\n              {isLoggedIn && (\r\n                <label className=\"inline-flex items-center rounded p-2 bg-gray-800 hover:bg-gray-700 transition-colors cursor-pointer\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    value=\"cash\"\r\n                    checked={paymentMethod === \"cash\"}\r\n                    onChange={() => setPaymentMethod(\"cash\")}\r\n                    className=\"text-blue-600\"\r\n                  />\r\n                  <span className=\"ml-2 text-gray-300\">Cash</span>\r\n                </label>\r\n              )}\r\n              <label className=\"inline-flex items-center rounded p-2 bg-gray-800 hover:bg-gray-700 transition-colors cursor-pointer\">\r\n                <input\r\n                  type=\"radio\"\r\n                  value=\"card\"\r\n                  checked={paymentMethod === \"card\"}\r\n                  onChange={() => setPaymentMethod(\"card\")}\r\n                  className=\"text-blue-600\"\r\n                />\r\n                <span className=\"ml-2 text-gray-300\">Card</span>\r\n              </label>\r\n            </div>\r\n          </div>\r\n          \r\n          {!isLoggedIn && (\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"guest-name\" className=\"block text-sm font-medium text-gray-300 mb-1\">\r\n                Your Name\r\n              </label>\r\n              <input\r\n                id=\"guest-name\"\r\n                type=\"text\"\r\n                value={guestName}\r\n                onChange={(e) => setGuestName(e.target.value)}\r\n                className=\"w-full p-3 bg-gray-800 text-white rounded border border-gray-700 focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500\"\r\n                placeholder=\"Enter your name\"\r\n                required\r\n              />\r\n              <p className=\"text-sm text-gray-400 mt-1\">Required for non-logged in users</p>\r\n            </div>\r\n          )}\r\n          \r\n          <div className=\"mt-4 mb-5\">\r\n            <div className=\"bg-gray-800/70 p-4 rounded border border-gray-700\">\r\n              <div className=\"flex justify-between items-center\">\r\n                <span className=\"text-gray-300\">Estimated Price:</span>\r\n                <span className=\"text-xl font-semibold text-blue-400\">${estimatedPrice.toFixed(2)}</span>\r\n              </div>\r\n              <p className=\"text-sm text-gray-400 mt-1\">\r\n                Based on {duration} hour{duration !== 1 ? 's' : ''} at ${club.hourly_price}/hour\r\n              </p>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"flex justify-end space-x-3 pt-2 border-t border-gray-700\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={onClose}\r\n              className=\"px-5 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded transition-colors\"\r\n              disabled={submitting}\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"px-5 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded transition-colors\"\r\n              disabled={submitting || !selectedTimeSlot || (!isLoggedIn && !guestName)}\r\n            >\r\n              {submitting ? 'Reserving...' : 'Reserve'}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReservationModal; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}