{"ast":null,"code":"// api.js - Comprehensive API client for FastAPI backend\n\nimport { getToken } from './auth';\n\n// Base API URL - empty for relative paths with proxy in development\nexport const API_BASE = '';\nexport const API_PATH = '/api/v1'; // Restore the v1 as it's needed based on the backend\n\n/**\r\n * Core API request function with automatic token handling\r\n */\nexport async function apiRequest(path, {\n  method = 'GET',\n  body,\n  token,\n  headers = {}\n} = {}) {\n  // Get token from auth utility if not provided explicitly\n  const authToken = token || getToken();\n\n  // Build headers with auth token if available\n  const requestHeaders = {\n    'Content-Type': 'application/json',\n    ...headers\n  };\n  if (authToken) {\n    requestHeaders['Authorization'] = `Bearer ${authToken}`;\n  }\n  try {\n    console.log(`Making ${method} request to ${API_BASE}${path}`);\n    const response = await fetch(`${API_BASE}${path}`, {\n      method,\n      headers: requestHeaders,\n      body: body ? JSON.stringify(body) : undefined,\n      credentials: 'include' // Include cookies for sessions\n    });\n\n    // Log response status for debugging\n    console.log(`Response status: ${response.status} ${response.statusText}`);\n\n    // Try to parse JSON, use empty object as fallback\n    const data = await response.json().catch(() => {\n      console.log(\"Failed to parse JSON from response\");\n      return {};\n    });\n\n    // Log response data for debugging\n    console.log(\"Response data:\", data);\n\n    // Handle API errors\n    if (!response.ok) {\n      throw {\n        status: response.status,\n        data,\n        message: data.detail || data.message || `Error ${response.status}: ${response.statusText}`\n      };\n    }\n    return data;\n  } catch (error) {\n    // Enhance error with additional info if it's not already our format\n    if (!error.status) {\n      console.error('API request failed:', error);\n      throw {\n        status: 0,\n        message: error.message || 'Network error, please check your connection',\n        data: {}\n      };\n    }\n    throw error;\n  }\n}\n\n// Authentication API\nexport const authAPI = {\n  login: (email, password) => apiRequest(`${API_PATH}/auth/login`, {\n    method: 'POST',\n    body: {\n      email,\n      password\n    } // Match the UserLogin schema which expects email and password\n  }),\n  register: userData => apiRequest(`${API_PATH}/auth/register`, {\n    method: 'POST',\n    body: userData\n  }),\n  getCurrentUser: () => apiRequest(`${API_PATH}/users/me`, {\n    method: 'GET'\n  }),\n  updateProfile: userData => apiRequest(`${API_PATH}/users/me`, {\n    method: 'PUT',\n    body: userData\n  })\n};\n\n// Clubs API\nexport const clubsAPI = {\n  getAllClubs: (filters = {}) => {\n    // Convert filters object to URL params\n    const params = new URLSearchParams();\n    Object.entries(filters).forEach(([key, value]) => {\n      if (value !== undefined && value !== null && value !== '') {\n        params.append(key, value);\n      }\n    });\n    const queryString = params.toString() ? `?${params.toString()}` : '';\n    return apiRequest(`${API_PATH}/clubs${queryString}`);\n  },\n  getClubById: clubId => apiRequest(`${API_PATH}/clubs/${clubId}`),\n  createClub: clubData => apiRequest(`${API_PATH}/clubs`, {\n    // Remove trailing slash to match FastAPI endpoint\n    method: 'POST',\n    body: clubData\n  }),\n  updateClub: (clubId, clubData) => apiRequest(`${API_PATH}/clubs/${clubId}`, {\n    method: 'PUT',\n    body: clubData\n  }),\n  deleteClub: clubId => apiRequest(`${API_PATH}/clubs/${clubId}`, {\n    method: 'DELETE'\n  }),\n  getClubsByOwner: () => apiRequest(`${API_PATH}/clubs/my-clubs`)\n};\n\n// Reservations API\nexport const reservationsAPI = {\n  getMyReservations: () => apiRequest(`${API_PATH}/reservations/my-reservations`),\n  createReservation: reservationData => apiRequest(`${API_PATH}/reservations`, {\n    method: 'POST',\n    body: reservationData\n  }),\n  cancelReservation: reservationId => apiRequest(`${API_PATH}/reservations/${reservationId}/cancel`, {\n    method: 'POST'\n  }),\n  getAvailableTimes: (clubId, date) => {\n    const params = new URLSearchParams();\n    if (date) params.append('date', date);\n    const queryString = params.toString() ? `?${params.toString()}` : '';\n    return apiRequest(`${API_PATH}/clubs/${clubId}/available-times${queryString}`);\n  }\n};\nexport default {\n  apiRequest,\n  auth: authAPI,\n  clubs: clubsAPI,\n  reservations: reservationsAPI\n};","map":{"version":3,"names":["getToken","API_BASE","API_PATH","apiRequest","path","method","body","token","headers","authToken","requestHeaders","console","log","response","fetch","JSON","stringify","undefined","credentials","status","statusText","data","json","catch","ok","message","detail","error","authAPI","login","email","password","register","userData","getCurrentUser","updateProfile","clubsAPI","getAllClubs","filters","params","URLSearchParams","Object","entries","forEach","key","value","append","queryString","toString","getClubById","clubId","createClub","clubData","updateClub","deleteClub","getClubsByOwner","reservationsAPI","getMyReservations","createReservation","reservationData","cancelReservation","reservationId","getAvailableTimes","date","auth","clubs","reservations"],"sources":["F:/Diplomna rabota 3/app/frontend-react/src/utils/api.js"],"sourcesContent":["// api.js - Comprehensive API client for FastAPI backend\r\n\r\nimport { getToken } from './auth';\r\n\r\n// Base API URL - empty for relative paths with proxy in development\r\nexport const API_BASE = '';\r\nexport const API_PATH = '/api/v1'; // Restore the v1 as it's needed based on the backend\r\n\r\n/**\r\n * Core API request function with automatic token handling\r\n */\r\nexport async function apiRequest(path, { method = 'GET', body, token, headers = {} } = {}) {\r\n  // Get token from auth utility if not provided explicitly\r\n  const authToken = token || getToken();\r\n  \r\n  // Build headers with auth token if available\r\n  const requestHeaders = { \r\n    'Content-Type': 'application/json',\r\n    ...headers\r\n  };\r\n  \r\n  if (authToken) {\r\n    requestHeaders['Authorization'] = `Bearer ${authToken}`;\r\n  }\r\n\r\n  try {\r\n    console.log(`Making ${method} request to ${API_BASE}${path}`);\r\n    const response = await fetch(`${API_BASE}${path}`, {\r\n      method,\r\n      headers: requestHeaders,\r\n      body: body ? JSON.stringify(body) : undefined,\r\n      credentials: 'include', // Include cookies for sessions\r\n    });\r\n\r\n    // Log response status for debugging\r\n    console.log(`Response status: ${response.status} ${response.statusText}`);\r\n\r\n    // Try to parse JSON, use empty object as fallback\r\n    const data = await response.json().catch(() => {\r\n      console.log(\"Failed to parse JSON from response\");\r\n      return {};\r\n    });\r\n    \r\n    // Log response data for debugging\r\n    console.log(\"Response data:\", data);\r\n    \r\n    // Handle API errors\r\n    if (!response.ok) {\r\n      throw {\r\n        status: response.status,\r\n        data,\r\n        message: data.detail || data.message || `Error ${response.status}: ${response.statusText}`\r\n      };\r\n    }\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    // Enhance error with additional info if it's not already our format\r\n    if (!error.status) {\r\n      console.error('API request failed:', error);\r\n      throw {\r\n        status: 0, \r\n        message: error.message || 'Network error, please check your connection',\r\n        data: {}\r\n      };\r\n    }\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Authentication API\r\nexport const authAPI = {\r\n  login: (email, password) => \r\n    apiRequest(`${API_PATH}/auth/login`, {\r\n      method: 'POST',\r\n      body: { email, password }  // Match the UserLogin schema which expects email and password\r\n    }),\r\n    \r\n  register: (userData) => \r\n    apiRequest(`${API_PATH}/auth/register`, {\r\n      method: 'POST',\r\n      body: userData\r\n    }),\r\n    \r\n  getCurrentUser: () => \r\n    apiRequest(`${API_PATH}/users/me`, {\r\n      method: 'GET'\r\n    }),\r\n    \r\n  updateProfile: (userData) => \r\n    apiRequest(`${API_PATH}/users/me`, {\r\n      method: 'PUT',\r\n      body: userData\r\n    })\r\n};\r\n\r\n// Clubs API\r\nexport const clubsAPI = {\r\n  getAllClubs: (filters = {}) => {\r\n    // Convert filters object to URL params\r\n    const params = new URLSearchParams();\r\n    Object.entries(filters).forEach(([key, value]) => {\r\n      if (value !== undefined && value !== null && value !== '') {\r\n        params.append(key, value);\r\n      }\r\n    });\r\n    \r\n    const queryString = params.toString() ? `?${params.toString()}` : '';\r\n    \r\n    return apiRequest(`${API_PATH}/clubs${queryString}`);\r\n  },\r\n  \r\n  getClubById: (clubId) => \r\n    apiRequest(`${API_PATH}/clubs/${clubId}`),\r\n    \r\n  createClub: (clubData) => \r\n    apiRequest(`${API_PATH}/clubs`, {  // Remove trailing slash to match FastAPI endpoint\r\n      method: 'POST',\r\n      body: clubData\r\n    }),\r\n    \r\n  updateClub: (clubId, clubData) => \r\n    apiRequest(`${API_PATH}/clubs/${clubId}`, {\r\n      method: 'PUT',\r\n      body: clubData\r\n    }),\r\n    \r\n  deleteClub: (clubId) => \r\n    apiRequest(`${API_PATH}/clubs/${clubId}`, {\r\n      method: 'DELETE'\r\n    }),\r\n    \r\n  getClubsByOwner: () => \r\n    apiRequest(`${API_PATH}/clubs/my-clubs`)\r\n};\r\n\r\n// Reservations API\r\nexport const reservationsAPI = {\r\n  getMyReservations: () => \r\n    apiRequest(`${API_PATH}/reservations/my-reservations`),\r\n    \r\n  createReservation: (reservationData) => \r\n    apiRequest(`${API_PATH}/reservations`, {\r\n      method: 'POST',\r\n      body: reservationData\r\n    }),\r\n    \r\n  cancelReservation: (reservationId) => \r\n    apiRequest(`${API_PATH}/reservations/${reservationId}/cancel`, {\r\n      method: 'POST'\r\n    }),\r\n    \r\n  getAvailableTimes: (clubId, date) => {\r\n    const params = new URLSearchParams();\r\n    if (date) params.append('date', date);\r\n    \r\n    const queryString = params.toString() ? `?${params.toString()}` : '';\r\n    \r\n    return apiRequest(`${API_PATH}/clubs/${clubId}/available-times${queryString}`);\r\n  }\r\n};\r\n\r\nexport default {\r\n  apiRequest,\r\n  auth: authAPI,\r\n  clubs: clubsAPI,\r\n  reservations: reservationsAPI\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}