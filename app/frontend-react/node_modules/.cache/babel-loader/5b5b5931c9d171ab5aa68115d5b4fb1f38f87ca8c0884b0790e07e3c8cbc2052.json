{"ast":null,"code":"// Authentication utility functions\n\n// Use absolute URLs like in api.js instead of proxy\nconst API_BASE = 'http://localhost:8000';\nconst API_URL = `${API_BASE}/api/v1`;\nconst TOKEN_KEY = 'sports_app_token';\nconst USER_DATA_KEY = 'sports_app_user';\n\n// Login function\nexport const loginUser = async credentials => {\n  try {\n    var _credentials$password;\n    console.log(\"Attempting login with credentials:\", {\n      email: credentials.email,\n      passwordLength: (_credentials$password = credentials.password) === null || _credentials$password === void 0 ? void 0 : _credentials$password.length\n    });\n\n    // We won't clear auth data here to avoid losing the session\n    // clearAuthData();\n\n    const response = await fetch(`${API_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials),\n      credentials: 'include' // Important for cookies\n    });\n    console.log(\"Login response status:\", response.status);\n    if (!response.ok) {\n      const errorData = await response.json();\n      console.error(\"Login error response:\", errorData);\n      throw new Error(typeof errorData.detail === 'string' ? errorData.detail : JSON.stringify(errorData.detail));\n    }\n    const data = await response.json();\n    console.log(\"Login successful, received data:\", {\n      userId: data.user.id,\n      username: data.user.username,\n      tokenPresent: !!data.access_token\n    });\n\n    // Store auth data in localStorage\n    localStorage.setItem('userId', data.user.id);\n    localStorage.setItem('token', data.access_token);\n    localStorage.setItem(TOKEN_KEY, data.access_token);\n    localStorage.setItem('username', data.user.username);\n    localStorage.setItem('isClubOwner', data.user.is_club_owner);\n    localStorage.setItem('role', data.user.role);\n    localStorage.setItem('isAuthenticated', 'true');\n\n    // Also save user data\n    saveUserData(data.user);\n    return data;\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error;\n  }\n};\n\n// Register function\nexport const registerUser = async userData => {\n  try {\n    const response = await fetch(`${API_URL}/auth/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData),\n      credentials: 'include'\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(typeof errorData.detail === 'string' ? errorData.detail : JSON.stringify(errorData.detail));\n    }\n    const data = await response.json();\n\n    // Store auth data in localStorage\n    localStorage.setItem('userId', data.user.id);\n    localStorage.setItem('token', data.access_token);\n    localStorage.setItem('username', data.user.username);\n    localStorage.setItem('isClubOwner', data.user.is_club_owner);\n    localStorage.setItem('role', data.user.role);\n    localStorage.setItem('isAuthenticated', 'true');\n    return data;\n  } catch (error) {\n    console.error('Registration error:', error);\n    throw error;\n  }\n};\n\n// Logout function\nexport const logoutUser = () => {\n  try {\n    console.log('Logout: Starting logout process');\n\n    // Instead of using clearAuthData, manually remove each item\n    // This helps avoid potential race conditions or event issues\n    localStorage.removeItem('userId');\n    localStorage.removeItem('token');\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.removeItem('username');\n    localStorage.removeItem('isClubOwner');\n    localStorage.removeItem('role');\n    localStorage.removeItem('isAuthenticated');\n    localStorage.removeItem(USER_DATA_KEY);\n    console.log('Logout: Auth data cleared');\n\n    // Add a small delay before redirecting to ensure changes propagate\n    setTimeout(() => {\n      console.log('Logout: Redirecting to login page');\n      // Use window.location.replace instead of href for a cleaner history\n      window.location.replace('/login');\n    }, 100);\n    return true;\n  } catch (error) {\n    console.error('Logout error:', error);\n    // If there's an error, still try to redirect\n    window.location.replace('/login');\n    return false;\n  }\n};\n\n// Check if user is authenticated\nexport const isAuthenticated = () => {\n  try {\n    const token = getToken();\n    const isAuth = localStorage.getItem('isAuthenticated') === 'true';\n    if (!token || !isAuth) {\n      return false;\n    }\n\n    // Basic token validation (check if it exists)\n    if (!token) {\n      console.log('No auth token found');\n      return false;\n    }\n\n    // Ideally we would check token expiry here but we'd need to decode the JWT\n    // For now, we'll just check if the token exists\n    return true;\n  } catch (error) {\n    console.error('Error checking authentication:', error);\n    return false;\n  }\n};\n\n// Get the current user's auth token\nexport const getToken = () => {\n  try {\n    // Try to get from TOKEN_KEY first (more reliable)\n    const token = localStorage.getItem(TOKEN_KEY);\n    if (token) {\n      return token;\n    }\n\n    // Fall back to 'token' key if needed\n    return localStorage.getItem('token');\n  } catch (error) {\n    console.error('Error getting token:', error);\n    return null;\n  }\n};\n\n// Get user information\nexport const getCurrentUser = () => {\n  try {\n    // Try to get from stored user data\n    const userData = localStorage.getItem(USER_DATA_KEY);\n    if (userData) {\n      return JSON.parse(userData);\n    }\n\n    // Fall back to individual user fields if needed\n    const userId = localStorage.getItem('userId');\n    const username = localStorage.getItem('username');\n    if (userId && username) {\n      return {\n        id: userId,\n        username: username,\n        isClubOwner: localStorage.getItem('isClubOwner') === 'true',\n        role: localStorage.getItem('role')\n      };\n    }\n    return null;\n  } catch (error) {\n    console.error('Error getting current user:', error);\n    return null;\n  }\n};\n\n// Save user data\nexport const saveUserData = userData => {\n  try {\n    if (!userData) {\n      console.error('Cannot save empty user data');\n      return false;\n    }\n    localStorage.setItem(USER_DATA_KEY, JSON.stringify(userData));\n    return true;\n  } catch (error) {\n    console.error('Error saving user data:', error);\n    return false;\n  }\n};\n\n// Clear all authentication data\nexport const clearAuthData = () => {\n  try {\n    // Remove all auth-related items\n    localStorage.removeItem('userId');\n    localStorage.removeItem('token');\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.removeItem('username');\n    localStorage.removeItem('isClubOwner');\n    localStorage.removeItem('role');\n    localStorage.removeItem('isAuthenticated');\n    localStorage.removeItem(USER_DATA_KEY);\n\n    // Trigger auth change event\n    const event = new Event('auth-change');\n    window.dispatchEvent(event);\n    return true;\n  } catch (error) {\n    console.error('Error clearing auth data:', error);\n    return false;\n  }\n};\n\n// Validate the current authentication token with the server\nexport const validateAuthToken = async () => {\n  try {\n    console.log(\"Validating authentication token with server\");\n    const token = getToken();\n    if (!token) {\n      console.log(\"No token to validate\");\n      return false;\n    }\n\n    // Make a request to the backend to validate the token\n    const response = await fetch(`${API_URL}/users/me`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (response.ok) {\n      console.log(\"Token validation successful\");\n      // Update user data with the latest from the server\n      const userData = await response.json();\n      saveUserData(userData);\n      return true;\n    } else {\n      console.error(\"Token validation failed:\", response.status);\n      // Token is invalid, clear auth data\n      clearAuthData();\n      return false;\n    }\n  } catch (error) {\n    console.error(\"Error validating token:\", error);\n    return false;\n  }\n};\n\n/**\r\n * Handle authentication response from login/register\r\n */\nexport function handleAuthResponse(data) {\n  if (!data) {\n    console.error('handleAuthResponse: No data provided');\n    return false;\n  }\n  console.log('handleAuthResponse: Processing auth data', {\n    hasToken: !!data.access_token,\n    hasUser: !!data.user\n  });\n  const {\n    access_token,\n    user\n  } = data;\n  if (!access_token || !user) {\n    console.error('handleAuthResponse: Missing token or user data');\n    return false;\n  }\n  try {\n    console.log('Starting to save authentication data');\n\n    // We'll no longer clear existing auth data to maintain session continuity\n    // clearAuthData();\n\n    // Save all auth data\n    localStorage.setItem('userId', user.id);\n    localStorage.setItem('token', access_token);\n    localStorage.setItem(TOKEN_KEY, access_token);\n    localStorage.setItem('username', user.username);\n    localStorage.setItem('isClubOwner', user.is_club_owner === true ? 'true' : 'false');\n    localStorage.setItem('role', user.role || '');\n    localStorage.setItem('isAuthenticated', 'true');\n\n    // Save the full user data\n    saveUserData(user);\n    console.log('handleAuthResponse: Authentication data successfully saved');\n    console.log('Local storage authentication state:', {\n      userId: localStorage.getItem('userId'),\n      token: localStorage.getItem('token') ? '[PRESENT]' : '[MISSING]',\n      tokenKey: localStorage.getItem(TOKEN_KEY) ? '[PRESENT]' : '[MISSING]',\n      username: localStorage.getItem('username'),\n      isAuthenticated: localStorage.getItem('isAuthenticated')\n    });\n\n    // Trigger auth change event\n    const event = new Event('auth-change');\n    window.dispatchEvent(event);\n    return true;\n  } catch (e) {\n    console.error('handleAuthResponse: Error saving auth data', e);\n    return false;\n  }\n}\nexport default {\n  loginUser,\n  registerUser,\n  logoutUser,\n  isAuthenticated,\n  getToken,\n  getCurrentUser,\n  saveUserData,\n  clearAuthData,\n  validateAuthToken,\n  handleAuthResponse\n};","map":{"version":3,"names":["API_BASE","API_URL","TOKEN_KEY","USER_DATA_KEY","loginUser","credentials","_credentials$password","console","log","email","passwordLength","password","length","response","fetch","method","headers","body","JSON","stringify","status","ok","errorData","json","error","Error","detail","data","userId","user","id","username","tokenPresent","access_token","localStorage","setItem","is_club_owner","role","saveUserData","registerUser","userData","logoutUser","removeItem","setTimeout","window","location","replace","isAuthenticated","token","getToken","isAuth","getItem","getCurrentUser","parse","isClubOwner","clearAuthData","event","Event","dispatchEvent","validateAuthToken","handleAuthResponse","hasToken","hasUser","tokenKey","e"],"sources":["F:/Diplomna rabota 3/app/frontend-react/src/utils/auth.js"],"sourcesContent":["// Authentication utility functions\r\n\r\n// Use absolute URLs like in api.js instead of proxy\r\nconst API_BASE = 'http://localhost:8000';\r\nconst API_URL = `${API_BASE}/api/v1`;\r\nconst TOKEN_KEY = 'sports_app_token';\r\nconst USER_DATA_KEY = 'sports_app_user';\r\n\r\n// Login function\r\nexport const loginUser = async (credentials) => {\r\n  try {\r\n    console.log(\"Attempting login with credentials:\", { email: credentials.email, passwordLength: credentials.password?.length });\r\n    \r\n    // We won't clear auth data here to avoid losing the session\r\n    // clearAuthData();\r\n    \r\n    const response = await fetch(`${API_URL}/auth/login`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(credentials),\r\n      credentials: 'include' // Important for cookies\r\n    });\r\n    \r\n    console.log(\"Login response status:\", response.status);\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      console.error(\"Login error response:\", errorData);\r\n      throw new Error(typeof errorData.detail === 'string' \r\n        ? errorData.detail \r\n        : JSON.stringify(errorData.detail));\r\n    }\r\n    \r\n    const data = await response.json();\r\n    console.log(\"Login successful, received data:\", { \r\n      userId: data.user.id, \r\n      username: data.user.username,\r\n      tokenPresent: !!data.access_token\r\n    });\r\n    \r\n    // Store auth data in localStorage\r\n    localStorage.setItem('userId', data.user.id);\r\n    localStorage.setItem('token', data.access_token);\r\n    localStorage.setItem(TOKEN_KEY, data.access_token);\r\n    localStorage.setItem('username', data.user.username);\r\n    localStorage.setItem('isClubOwner', data.user.is_club_owner);\r\n    localStorage.setItem('role', data.user.role);\r\n    localStorage.setItem('isAuthenticated', 'true');\r\n    \r\n    // Also save user data\r\n    saveUserData(data.user);\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    console.error('Login error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Register function\r\nexport const registerUser = async (userData) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/auth/register`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(userData),\r\n      credentials: 'include'\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(typeof errorData.detail === 'string' \r\n        ? errorData.detail \r\n        : JSON.stringify(errorData.detail));\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    // Store auth data in localStorage\r\n    localStorage.setItem('userId', data.user.id);\r\n    localStorage.setItem('token', data.access_token);\r\n    localStorage.setItem('username', data.user.username);\r\n    localStorage.setItem('isClubOwner', data.user.is_club_owner);\r\n    localStorage.setItem('role', data.user.role);\r\n    localStorage.setItem('isAuthenticated', 'true');\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    console.error('Registration error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Logout function\r\nexport const logoutUser = () => {\r\n  try {\r\n    console.log('Logout: Starting logout process');\r\n    \r\n    // Instead of using clearAuthData, manually remove each item\r\n    // This helps avoid potential race conditions or event issues\r\n    localStorage.removeItem('userId');\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem(TOKEN_KEY);\r\n    localStorage.removeItem('username');\r\n    localStorage.removeItem('isClubOwner');\r\n    localStorage.removeItem('role');\r\n    localStorage.removeItem('isAuthenticated');\r\n    localStorage.removeItem(USER_DATA_KEY);\r\n    \r\n    console.log('Logout: Auth data cleared');\r\n    \r\n    // Add a small delay before redirecting to ensure changes propagate\r\n    setTimeout(() => {\r\n      console.log('Logout: Redirecting to login page');\r\n      // Use window.location.replace instead of href for a cleaner history\r\n      window.location.replace('/login');\r\n    }, 100);\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Logout error:', error);\r\n    // If there's an error, still try to redirect\r\n    window.location.replace('/login');\r\n    return false;\r\n  }\r\n};\r\n\r\n// Check if user is authenticated\r\nexport const isAuthenticated = () => {\r\n  try {\r\n    const token = getToken();\r\n    const isAuth = localStorage.getItem('isAuthenticated') === 'true';\r\n    \r\n    if (!token || !isAuth) {\r\n      return false;\r\n    }\r\n    \r\n    // Basic token validation (check if it exists)\r\n    if (!token) {\r\n      console.log('No auth token found');\r\n      return false;\r\n    }\r\n    \r\n    // Ideally we would check token expiry here but we'd need to decode the JWT\r\n    // For now, we'll just check if the token exists\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error checking authentication:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Get the current user's auth token\r\nexport const getToken = () => {\r\n  try {\r\n    // Try to get from TOKEN_KEY first (more reliable)\r\n    const token = localStorage.getItem(TOKEN_KEY);\r\n    if (token) {\r\n      return token;\r\n    }\r\n    \r\n    // Fall back to 'token' key if needed\r\n    return localStorage.getItem('token');\r\n  } catch (error) {\r\n    console.error('Error getting token:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Get user information\r\nexport const getCurrentUser = () => {\r\n  try {\r\n    // Try to get from stored user data\r\n    const userData = localStorage.getItem(USER_DATA_KEY);\r\n    if (userData) {\r\n      return JSON.parse(userData);\r\n    }\r\n    \r\n    // Fall back to individual user fields if needed\r\n    const userId = localStorage.getItem('userId');\r\n    const username = localStorage.getItem('username');\r\n    \r\n    if (userId && username) {\r\n      return {\r\n        id: userId,\r\n        username: username,\r\n        isClubOwner: localStorage.getItem('isClubOwner') === 'true',\r\n        role: localStorage.getItem('role')\r\n      };\r\n    }\r\n    \r\n    return null;\r\n  } catch (error) {\r\n    console.error('Error getting current user:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Save user data\r\nexport const saveUserData = (userData) => {\r\n  try {\r\n    if (!userData) {\r\n      console.error('Cannot save empty user data');\r\n      return false;\r\n    }\r\n    \r\n    localStorage.setItem(USER_DATA_KEY, JSON.stringify(userData));\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error saving user data:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Clear all authentication data\r\nexport const clearAuthData = () => {\r\n  try {\r\n    // Remove all auth-related items\r\n    localStorage.removeItem('userId');\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem(TOKEN_KEY);\r\n    localStorage.removeItem('username');\r\n    localStorage.removeItem('isClubOwner');\r\n    localStorage.removeItem('role');\r\n    localStorage.removeItem('isAuthenticated');\r\n    localStorage.removeItem(USER_DATA_KEY);\r\n    \r\n    // Trigger auth change event\r\n    const event = new Event('auth-change');\r\n    window.dispatchEvent(event);\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error clearing auth data:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Validate the current authentication token with the server\r\nexport const validateAuthToken = async () => {\r\n  try {\r\n    console.log(\"Validating authentication token with server\");\r\n    const token = getToken();\r\n    \r\n    if (!token) {\r\n      console.log(\"No token to validate\");\r\n      return false;\r\n    }\r\n    \r\n    // Make a request to the backend to validate the token\r\n    const response = await fetch(`${API_URL}/users/me`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    });\r\n    \r\n    if (response.ok) {\r\n      console.log(\"Token validation successful\");\r\n      // Update user data with the latest from the server\r\n      const userData = await response.json();\r\n      saveUserData(userData);\r\n      return true;\r\n    } else {\r\n      console.error(\"Token validation failed:\", response.status);\r\n      // Token is invalid, clear auth data\r\n      clearAuthData();\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error validating token:\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Handle authentication response from login/register\r\n */\r\nexport function handleAuthResponse(data) {\r\n  if (!data) {\r\n    console.error('handleAuthResponse: No data provided');\r\n    return false;\r\n  }\r\n  \r\n  console.log('handleAuthResponse: Processing auth data', { \r\n    hasToken: !!data.access_token, \r\n    hasUser: !!data.user \r\n  });\r\n  \r\n  const { access_token, user } = data;\r\n  \r\n  if (!access_token || !user) {\r\n    console.error('handleAuthResponse: Missing token or user data');\r\n    return false;\r\n  }\r\n  \r\n  try {\r\n    console.log('Starting to save authentication data');\r\n    \r\n    // We'll no longer clear existing auth data to maintain session continuity\r\n    // clearAuthData();\r\n\r\n    // Save all auth data\r\n    localStorage.setItem('userId', user.id);\r\n    localStorage.setItem('token', access_token);\r\n    localStorage.setItem(TOKEN_KEY, access_token);\r\n    localStorage.setItem('username', user.username);\r\n    localStorage.setItem('isClubOwner', user.is_club_owner === true ? 'true' : 'false');\r\n    localStorage.setItem('role', user.role || '');\r\n    localStorage.setItem('isAuthenticated', 'true');\r\n    \r\n    // Save the full user data\r\n    saveUserData(user);\r\n    \r\n    console.log('handleAuthResponse: Authentication data successfully saved');\r\n    console.log('Local storage authentication state:', {\r\n      userId: localStorage.getItem('userId'),\r\n      token: localStorage.getItem('token') ? '[PRESENT]' : '[MISSING]',\r\n      tokenKey: localStorage.getItem(TOKEN_KEY) ? '[PRESENT]' : '[MISSING]',\r\n      username: localStorage.getItem('username'),\r\n      isAuthenticated: localStorage.getItem('isAuthenticated')\r\n    });\r\n    \r\n    // Trigger auth change event\r\n    const event = new Event('auth-change');\r\n    window.dispatchEvent(event);\r\n    \r\n    return true;\r\n  } catch (e) {\r\n    console.error('handleAuthResponse: Error saving auth data', e);\r\n    return false;\r\n  }\r\n}\r\n\r\nexport default {\r\n  loginUser,\r\n  registerUser,\r\n  logoutUser,\r\n  isAuthenticated,\r\n  getToken,\r\n  getCurrentUser,\r\n  saveUserData,\r\n  clearAuthData,\r\n  validateAuthToken,\r\n  handleAuthResponse\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}