{"ast":null,"code":"var _jsxFileName = \"F:\\\\Diplomna rabota 3\\\\app\\\\frontend-react\\\\src\\\\components\\\\ReservationModal.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { format } from 'date-fns';\nimport reservationService from '../utils/reservationService';\nimport { getToken, isAuthenticated } from '../utils/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReservationModal = ({\n  club,\n  isOpen,\n  onClose,\n  isLoggedIn,\n  userData\n}) => {\n  _s();\n  const [date, setDate] = useState(format(new Date(), 'yyyy-MM-dd'));\n  const [timeSlots, setTimeSlots] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState(null);\n  const [duration, setDuration] = useState(1);\n  const [paymentMethod, setPaymentMethod] = useState(isLoggedIn ? \"cash\" : \"card\");\n  const [guestName, setGuestName] = useState(\"\");\n  const [estimatedPrice, setEstimatedPrice] = useState(0);\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const [submitting, setSubmitting] = useState(false);\n\n  // Reset form state when opened\n  useEffect(() => {\n    if (isOpen) {\n      // Clear all state when modal is opened\n      setSelectedTimeSlot(null);\n      setTimeSlots([]);\n      setDate(format(new Date(), 'yyyy-MM-dd'));\n      setDuration(1);\n      setError(\"\");\n      setSuccess(\"\");\n\n      // Refresh login status\n      const authCheck = isAuthenticated();\n      if (isLoggedIn !== authCheck) {\n        console.log(\"Authentication state mismatch, refreshing page\");\n        window.location.reload();\n        return;\n      }\n\n      // Default payment method\n      setPaymentMethod(authCheck ? \"cash\" : \"card\");\n    }\n  }, [isOpen, isLoggedIn]);\n\n  // Calculate estimated price whenever duration or club changes\n  useEffect(() => {\n    if (club && duration) {\n      setEstimatedPrice(parseFloat(club.hourly_price) * parseFloat(duration));\n    }\n\n    // When duration changes, we need to update which slots are available\n    if (duration && timeSlots.length > 0) {\n      updateAvailableSlotsForDuration();\n    }\n  }, [club, duration, timeSlots.length]);\n\n  // Refetch time slots when date changes\n  useEffect(() => {\n    if (isOpen && club && date) {\n      // Clear selected time slot when date changes\n      setSelectedTimeSlot(null);\n      fetchAvailableTimeSlots();\n    }\n  }, [date, club, isOpen]);\n\n  // Update available slots based on duration\n  const updateAvailableSlotsForDuration = () => {\n    if (!timeSlots.length) return;\n\n    // Make a copy of the original time slots\n    const originalSlots = [...timeSlots];\n    const durationHours = parseInt(duration);\n\n    // Create a new array with updated availability based on the duration\n    const updatedSlots = originalSlots.map((slot, index) => {\n      // If already unavailable, keep it that way\n      if (!slot.is_available) {\n        return slot;\n      }\n\n      // Check if there are enough consecutive available slots after this one\n      let hasEnoughSlots = true;\n      for (let i = 1; i < durationHours; i++) {\n        // Look for consecutive slots by time, not just by array index\n        // Find the next slot by hour (e.g., after 8:00 should be 9:00)\n        const currentHour = parseInt(slot.start_time.split(':')[0]);\n        const nextHour = currentHour + i;\n        const nextTimeString = `${nextHour.toString().padStart(2, '0')}:00`;\n\n        // Find this slot in our array\n        const nextSlot = originalSlots.find(s => s.start_time === nextTimeString);\n\n        // If we don't find the next slot or it's not available, we can't book this duration\n        if (!nextSlot || !nextSlot.is_available) {\n          hasEnoughSlots = false;\n          break;\n        }\n      }\n      return {\n        ...slot,\n        is_available: hasEnoughSlots\n      };\n    });\n    console.log(`Updated availability for duration ${durationHours} hours:`, updatedSlots.filter(s => s.is_available).map(s => s.start_time));\n    setTimeSlots(updatedSlots);\n  };\n  const fetchAvailableTimeSlots = async () => {\n    setLoading(true);\n    setError(\"\");\n    setSelectedTimeSlot(null); // Clear selection when fetching new slots\n    setTimeSlots([]); // Clear existing time slots completely\n\n    try {\n      console.log(`Fetching available slots for club ${club.id} on date ${date}`);\n      const data = await reservationService.getAvailableTimeSlots(club.id, date);\n      console.log(\"Available time slots:\", data);\n      if (Array.isArray(data)) {\n        // Sort time slots by time\n        const sortedData = [...data].sort((a, b) => {\n          const timeA = parseInt(a.start_time.replace(':', ''));\n          const timeB = parseInt(b.start_time.replace(':', ''));\n          return timeA - timeB;\n        });\n\n        // Set the sorted data directly\n        setTimeSlots(sortedData);\n\n        // Update availability based on duration\n        setTimeout(() => {\n          updateAvailableSlotsForDuration();\n        }, 0);\n      } else {\n        setTimeSlots([]);\n      }\n    } catch (error) {\n      console.error(\"Error fetching time slots:\", error);\n      setError(error.message || \"An error occurred while fetching available time slots\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError(\"\");\n    setSuccess(\"\");\n    setSubmitting(true);\n    console.log(\"Reservation form submitted\");\n\n    // Validation\n    if (!selectedTimeSlot) {\n      setError(\"Please select a time slot\");\n      setSubmitting(false);\n      return;\n    }\n    if (!isLoggedIn && !guestName) {\n      setError(\"Please enter your name for the reservation\");\n      setSubmitting(false);\n      return;\n    }\n    if (!isLoggedIn && paymentMethod === \"cash\") {\n      setError(\"Non-logged in users can only pay by card\");\n      setSubmitting(false);\n      return;\n    }\n\n    // Re-check if the time slot is still available\n    try {\n      // Refresh available slots right before submitting\n      const updatedSlots = await reservationService.getAvailableTimeSlots(club.id, date);\n\n      // Sort the slots for consistency\n      const sortedSlots = [...updatedSlots].sort((a, b) => {\n        return parseInt(a.start_time.replace(':', '')) - parseInt(b.start_time.replace(':', ''));\n      });\n\n      // Find the selected slot in the updated data\n      const selectedTime = selectedTimeSlot.start_time;\n      const selectedSlot = sortedSlots.find(slot => slot.start_time === selectedTime);\n\n      // If the slot doesn't exist or isn't available, show an error\n      if (!selectedSlot || !selectedSlot.is_available) {\n        setError(\"This time slot is no longer available. Please select a different time.\");\n        setSelectedTimeSlot(null);\n        setTimeSlots(sortedSlots);\n        updateAvailableSlotsForDuration();\n        setSubmitting(false);\n        return;\n      }\n\n      // For multi-hour durations, check consecutive slots availability\n      const durationHours = parseInt(duration);\n      if (durationHours > 1) {\n        const currentHour = parseInt(selectedTime.split(':')[0]);\n\n        // Check if all consecutive slots are available\n        for (let i = 1; i < durationHours; i++) {\n          const nextHour = currentHour + i;\n          const nextTimeString = `${nextHour.toString().padStart(2, '0')}:00`;\n          const nextSlot = sortedSlots.find(s => s.start_time === nextTimeString);\n          if (!nextSlot || !nextSlot.is_available) {\n            setError(`Not enough available consecutive slots for ${durationHours} hour duration.`);\n            setTimeSlots(sortedSlots);\n            updateAvailableSlotsForDuration();\n            setSubmitting(false);\n            return;\n          }\n        }\n      }\n    } catch (error) {\n      console.error(\"Error checking time slot availability:\", error);\n      // Continue with reservation attempt\n    }\n\n    // Authentication validation for logged-in users\n    if (isLoggedIn) {\n      const token = getToken();\n      if (!token) {\n        setError(\"Your session has expired. Please log in again.\");\n        setSubmitting(false);\n        return;\n      }\n\n      // Verify token is still valid with backend\n      try {\n        const response = await fetch(`http://localhost:8000/api/v1/users/me`, {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        if (!response.ok) {\n          console.error(\"Token validation failed:\", response.status);\n          setError(\"Your session is invalid. Please log in again.\");\n          setSubmitting(false);\n          localStorage.removeItem('token');\n          localStorage.removeItem('isAuthenticated');\n          return;\n        }\n      } catch (error) {\n        console.error(\"Token validation request failed:\", error);\n        setError(\"Could not verify your session. Please try again.\");\n        setSubmitting(false);\n        return;\n      }\n    }\n\n    // Prepare reservation data without timezone conversion\n    const [hours, minutes] = selectedTimeSlot.start_time.split(':').map(Number);\n\n    // Create a date object with the selected date and time\n    const reservationDate = new Date(date);\n    reservationDate.setHours(hours, minutes, 0, 0);\n\n    // Format date string in ISO format\n    const reservationTimeString = reservationDate.toISOString().slice(0, 19) + \".000Z\";\n    console.log(\"Using reservation time:\", {\n      date: date,\n      time: selectedTimeSlot.start_time,\n      formattedTime: reservationTimeString,\n      duration: duration\n    });\n    const reservationData = {\n      club_id: club.id,\n      reservation_time: reservationTimeString,\n      duration: parseFloat(duration),\n      payment_method: paymentMethod\n    };\n\n    // Add guest name for non-logged in users\n    if (!isLoggedIn) {\n      reservationData.guest_name = guestName;\n    }\n    console.log(\"Reservation data:\", reservationData);\n    try {\n      const data = await reservationService.createReservation(reservationData);\n      console.log(\"Reservation created successfully:\", data);\n\n      // Show success message\n      setSuccess(`Reservation created successfully for ${selectedTimeSlot.start_time} (${duration} hour${duration > 1 ? 's' : ''})!`);\n\n      // Reset form\n      setSelectedTimeSlot(null);\n      setDuration(1);\n      setPaymentMethod(isLoggedIn ? \"cash\" : \"card\");\n      setGuestName(\"\");\n\n      // Refresh the time slots to reflect the new reservation\n      fetchAvailableTimeSlots();\n    } catch (error) {\n      console.error(\"Error creating reservation:\", error);\n      if (error.status === 401) {\n        setError(\"You must be logged in to make a reservation. Please log in and try again.\");\n      } else if (error.status === 400 && error.message && error.message.includes(\"time slot is already booked\")) {\n        setError(\"This time slot is no longer available. Please select a different time.\");\n        // Refresh available slots to show updated availability\n        fetchAvailableTimeSlots();\n      } else {\n        setError(error.message || \"An error occurred during reservation creation\");\n      }\n    } finally {\n      setSubmitting(false);\n    }\n  };\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-gray-900 rounded-lg p-6 w-full max-w-md max-h-[80vh] overflow-y-auto scrollbar-thin scrollbar-thumb-gray-600 scrollbar-track-gray-800\",\n      style: {\n        maxHeight: \"calc(100vh - 100px)\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sticky top-0 bg-gray-900 pt-1 pb-3 border-b border-gray-700 mb-4 flex justify-between items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold text-gray-100\",\n          children: [\"Reserve \", club.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          className: \"text-gray-400 hover:text-white rounded-full hover:bg-gray-800 p-1 transition-colors\",\n          children: /*#__PURE__*/_jsxDEV(\"svg\", {\n            xmlns: \"http://www.w3.org/2000/svg\",\n            className: \"h-6 w-6\",\n            fill: \"none\",\n            viewBox: \"0 0 24 24\",\n            stroke: \"currentColor\",\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              strokeLinecap: \"round\",\n              strokeLinejoin: \"round\",\n              strokeWidth: 2,\n              d: \"M6 18L18 6M6 6l12 12\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-red-900/50 text-white p-3 rounded mb-4 border border-red-800\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 11\n      }, this), success && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-green-900/50 text-white p-3 rounded mb-4 border border-green-800\",\n        children: success\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"space-y-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"reservation-date\",\n            className: \"block text-sm font-medium text-gray-300 mb-1\",\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"reservation-date\",\n            type: \"date\",\n            value: date,\n            onChange: e => setDate(e.target.value),\n            min: format(new Date(), 'yyyy-MM-dd'),\n            className: \"w-full p-3 bg-gray-800 text-white rounded border border-gray-700 focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-300 mb-1\",\n            children: \"Available Time Slots\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 13\n          }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex justify-center py-4\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"animate-spin rounded-full h-6 w-6 border-t-2 border-b-2 border-blue-500\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 15\n          }, this) : timeSlots.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-3 gap-2 mt-2\",\n            children: timeSlots.map((slot, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              disabled: !slot.is_available,\n              onClick: () => setSelectedTimeSlot(slot),\n              className: `py-2 px-3 rounded text-center text-sm transition-colors ${selectedTimeSlot === slot ? 'bg-blue-600 text-white' : slot.is_available ? 'bg-gray-800 text-white hover:bg-gray-700' : 'bg-gray-900 text-gray-500 cursor-not-allowed border border-gray-800'}`,\n              children: slot.start_time\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-gray-800/50 border border-gray-700 rounded p-3 text-center\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-gray-400 text-sm\",\n              children: \"No time slots available for this date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"duration\",\n            className: \"block text-sm font-medium text-gray-300 mb-1\",\n            children: \"Duration (hours)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"duration\",\n            value: duration,\n            onChange: e => setDuration(e.target.value),\n            className: \"w-full p-3 bg-gray-800 text-white rounded border border-gray-700 focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500\",\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"1\",\n              children: \"1 hour\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 411,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"2\",\n              children: \"2 hours\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"3\",\n              children: \"3 hours\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"4\",\n              children: \"4 hours\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-300 mb-1\",\n            children: \"Payment Method\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex space-x-4 mt-1\",\n            children: [isLoggedIn && /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"inline-flex items-center rounded p-2 bg-gray-800 hover:bg-gray-700 transition-colors cursor-pointer\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                value: \"cash\",\n                checked: paymentMethod === \"cash\",\n                onChange: () => setPaymentMethod(\"cash\"),\n                className: \"text-blue-600\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 425,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"ml-2 text-gray-300\",\n                children: \"Cash\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 432,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"inline-flex items-center rounded p-2 bg-gray-800 hover:bg-gray-700 transition-colors cursor-pointer\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                value: \"card\",\n                checked: paymentMethod === \"card\",\n                onChange: () => setPaymentMethod(\"card\"),\n                className: \"text-blue-600\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 436,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"ml-2 text-gray-300\",\n                children: \"Card\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 443,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 435,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 11\n        }, this), !isLoggedIn && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"guest-name\",\n            className: \"block text-sm font-medium text-gray-300 mb-1\",\n            children: \"Your Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"guest-name\",\n            type: \"text\",\n            value: guestName,\n            onChange: e => setGuestName(e.target.value),\n            className: \"w-full p-3 bg-gray-800 text-white rounded border border-gray-700 focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500\",\n            placeholder: \"Enter your name\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-400 mt-1\",\n            children: \"Required for non-logged in users\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4 mb-5\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-gray-800/70 p-4 rounded border border-gray-700\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex justify-between items-center\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-gray-300\",\n                children: \"Estimated Price:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 469,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-xl font-semibold text-blue-400\",\n                children: [\"$\", estimatedPrice.toFixed(2)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 470,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm text-gray-400 mt-1\",\n              children: [\"Based on \", duration, \" hour\", duration !== 1 ? 's' : '', \" at $\", club.hourly_price, \"/hour\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-end space-x-3 pt-2 border-t border-gray-700\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: onClose,\n            className: \"px-5 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded transition-colors\",\n            disabled: submitting,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"px-5 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded transition-colors\",\n            disabled: submitting || !selectedTimeSlot || !isLoggedIn && !guestName,\n            children: submitting ? 'Reserving...' : 'Reserve'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 323,\n    columnNumber: 5\n  }, this);\n};\n_s(ReservationModal, \"tG36/6m3Jp4MC3mW2NnvZNynQLA=\");\n_c = ReservationModal;\nexport default ReservationModal;\nvar _c;\n$RefreshReg$(_c, \"ReservationModal\");","map":{"version":3,"names":["React","useState","useEffect","format","reservationService","getToken","isAuthenticated","jsxDEV","_jsxDEV","ReservationModal","club","isOpen","onClose","isLoggedIn","userData","_s","date","setDate","Date","timeSlots","setTimeSlots","loading","setLoading","selectedTimeSlot","setSelectedTimeSlot","duration","setDuration","paymentMethod","setPaymentMethod","guestName","setGuestName","estimatedPrice","setEstimatedPrice","error","setError","success","setSuccess","submitting","setSubmitting","authCheck","console","log","window","location","reload","parseFloat","hourly_price","length","updateAvailableSlotsForDuration","fetchAvailableTimeSlots","originalSlots","durationHours","parseInt","updatedSlots","map","slot","index","is_available","hasEnoughSlots","i","currentHour","start_time","split","nextHour","nextTimeString","toString","padStart","nextSlot","find","s","filter","id","data","getAvailableTimeSlots","Array","isArray","sortedData","sort","a","b","timeA","replace","timeB","setTimeout","message","handleSubmit","e","preventDefault","sortedSlots","selectedTime","selectedSlot","token","response","fetch","method","headers","ok","status","localStorage","removeItem","hours","minutes","Number","reservationDate","setHours","reservationTimeString","toISOString","slice","time","formattedTime","reservationData","club_id","reservation_time","payment_method","guest_name","createReservation","includes","className","children","style","maxHeight","name","fileName","_jsxFileName","lineNumber","columnNumber","onClick","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","onSubmit","htmlFor","type","value","onChange","target","min","required","disabled","checked","placeholder","toFixed","_c","$RefreshReg$"],"sources":["F:/Diplomna rabota 3/app/frontend-react/src/components/ReservationModal.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { format } from 'date-fns';\r\nimport reservationService from '../utils/reservationService';\r\nimport { getToken, isAuthenticated } from '../utils/auth';\r\n\r\nconst ReservationModal = ({ club, isOpen, onClose, isLoggedIn, userData }) => {\r\n  const [date, setDate] = useState(format(new Date(), 'yyyy-MM-dd'));\r\n  const [timeSlots, setTimeSlots] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState(null);\r\n  const [duration, setDuration] = useState(1);\r\n  const [paymentMethod, setPaymentMethod] = useState(isLoggedIn ? \"cash\" : \"card\");\r\n  const [guestName, setGuestName] = useState(\"\");\r\n  const [estimatedPrice, setEstimatedPrice] = useState(0);\r\n  const [error, setError] = useState(\"\");\r\n  const [success, setSuccess] = useState(\"\");\r\n  const [submitting, setSubmitting] = useState(false);\r\n  \r\n  // Reset form state when opened\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      // Clear all state when modal is opened\r\n      setSelectedTimeSlot(null);\r\n      setTimeSlots([]);\r\n      setDate(format(new Date(), 'yyyy-MM-dd'));\r\n      setDuration(1);\r\n      setError(\"\");\r\n      setSuccess(\"\");\r\n      \r\n      // Refresh login status\r\n      const authCheck = isAuthenticated();\r\n      if (isLoggedIn !== authCheck) {\r\n        console.log(\"Authentication state mismatch, refreshing page\");\r\n        window.location.reload();\r\n        return;\r\n      }\r\n      \r\n      // Default payment method\r\n      setPaymentMethod(authCheck ? \"cash\" : \"card\");\r\n    }\r\n  }, [isOpen, isLoggedIn]);\r\n  \r\n  // Calculate estimated price whenever duration or club changes\r\n  useEffect(() => {\r\n    if (club && duration) {\r\n      setEstimatedPrice(parseFloat(club.hourly_price) * parseFloat(duration));\r\n    }\r\n    \r\n    // When duration changes, we need to update which slots are available\r\n    if (duration && timeSlots.length > 0) {\r\n      updateAvailableSlotsForDuration();\r\n    }\r\n  }, [club, duration, timeSlots.length]);\r\n\r\n  // Refetch time slots when date changes\r\n  useEffect(() => {\r\n    if (isOpen && club && date) {\r\n      // Clear selected time slot when date changes\r\n      setSelectedTimeSlot(null);\r\n      fetchAvailableTimeSlots();\r\n    }\r\n  }, [date, club, isOpen]);\r\n  \r\n  // Update available slots based on duration\r\n  const updateAvailableSlotsForDuration = () => {\r\n    if (!timeSlots.length) return;\r\n    \r\n    // Make a copy of the original time slots\r\n    const originalSlots = [...timeSlots];\r\n    const durationHours = parseInt(duration);\r\n    \r\n    // Create a new array with updated availability based on the duration\r\n    const updatedSlots = originalSlots.map((slot, index) => {\r\n      // If already unavailable, keep it that way\r\n      if (!slot.is_available) {\r\n        return slot;\r\n      }\r\n      \r\n      // Check if there are enough consecutive available slots after this one\r\n      let hasEnoughSlots = true;\r\n      for (let i = 1; i < durationHours; i++) {\r\n        // Look for consecutive slots by time, not just by array index\r\n        // Find the next slot by hour (e.g., after 8:00 should be 9:00)\r\n        const currentHour = parseInt(slot.start_time.split(':')[0]);\r\n        const nextHour = currentHour + i;\r\n        const nextTimeString = `${nextHour.toString().padStart(2, '0')}:00`;\r\n        \r\n        // Find this slot in our array\r\n        const nextSlot = originalSlots.find(s => s.start_time === nextTimeString);\r\n        \r\n        // If we don't find the next slot or it's not available, we can't book this duration\r\n        if (!nextSlot || !nextSlot.is_available) {\r\n          hasEnoughSlots = false;\r\n          break;\r\n        }\r\n      }\r\n      \r\n      return {\r\n        ...slot,\r\n        is_available: hasEnoughSlots\r\n      };\r\n    });\r\n    \r\n    console.log(`Updated availability for duration ${durationHours} hours:`, \r\n      updatedSlots.filter(s => s.is_available).map(s => s.start_time));\r\n    \r\n    setTimeSlots(updatedSlots);\r\n  };\r\n  \r\n  const fetchAvailableTimeSlots = async () => {\r\n    setLoading(true);\r\n    setError(\"\");\r\n    setSelectedTimeSlot(null); // Clear selection when fetching new slots\r\n    setTimeSlots([]); // Clear existing time slots completely\r\n    \r\n    try {\r\n      console.log(`Fetching available slots for club ${club.id} on date ${date}`);\r\n      const data = await reservationService.getAvailableTimeSlots(club.id, date);\r\n      console.log(\"Available time slots:\", data);\r\n      \r\n      if (Array.isArray(data)) {\r\n        // Sort time slots by time\r\n        const sortedData = [...data].sort((a, b) => {\r\n          const timeA = parseInt(a.start_time.replace(':', ''));\r\n          const timeB = parseInt(b.start_time.replace(':', ''));\r\n          return timeA - timeB;\r\n        });\r\n        \r\n        // Set the sorted data directly\r\n        setTimeSlots(sortedData);\r\n        \r\n        // Update availability based on duration\r\n        setTimeout(() => {\r\n          updateAvailableSlotsForDuration();\r\n        }, 0);\r\n      } else {\r\n        setTimeSlots([]);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching time slots:\", error);\r\n      setError(error.message || \"An error occurred while fetching available time slots\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError(\"\");\r\n    setSuccess(\"\");\r\n    setSubmitting(true);\r\n    \r\n    console.log(\"Reservation form submitted\");\r\n    \r\n    // Validation\r\n    if (!selectedTimeSlot) {\r\n      setError(\"Please select a time slot\");\r\n      setSubmitting(false);\r\n      return;\r\n    }\r\n    \r\n    if (!isLoggedIn && !guestName) {\r\n      setError(\"Please enter your name for the reservation\");\r\n      setSubmitting(false);\r\n      return;\r\n    }\r\n    \r\n    if (!isLoggedIn && paymentMethod === \"cash\") {\r\n      setError(\"Non-logged in users can only pay by card\");\r\n      setSubmitting(false);\r\n      return;\r\n    }\r\n    \r\n    // Re-check if the time slot is still available\r\n    try {\r\n      // Refresh available slots right before submitting\r\n      const updatedSlots = await reservationService.getAvailableTimeSlots(club.id, date);\r\n      \r\n      // Sort the slots for consistency\r\n      const sortedSlots = [...updatedSlots].sort((a, b) => {\r\n        return parseInt(a.start_time.replace(':', '')) - parseInt(b.start_time.replace(':', ''));\r\n      });\r\n      \r\n      // Find the selected slot in the updated data\r\n      const selectedTime = selectedTimeSlot.start_time;\r\n      const selectedSlot = sortedSlots.find(slot => slot.start_time === selectedTime);\r\n      \r\n      // If the slot doesn't exist or isn't available, show an error\r\n      if (!selectedSlot || !selectedSlot.is_available) {\r\n        setError(\"This time slot is no longer available. Please select a different time.\");\r\n        setSelectedTimeSlot(null);\r\n        setTimeSlots(sortedSlots);\r\n        updateAvailableSlotsForDuration();\r\n        setSubmitting(false);\r\n        return;\r\n      }\r\n      \r\n      // For multi-hour durations, check consecutive slots availability\r\n      const durationHours = parseInt(duration);\r\n      if (durationHours > 1) {\r\n        const currentHour = parseInt(selectedTime.split(':')[0]);\r\n        \r\n        // Check if all consecutive slots are available\r\n        for (let i = 1; i < durationHours; i++) {\r\n          const nextHour = currentHour + i;\r\n          const nextTimeString = `${nextHour.toString().padStart(2, '0')}:00`;\r\n          const nextSlot = sortedSlots.find(s => s.start_time === nextTimeString);\r\n          \r\n          if (!nextSlot || !nextSlot.is_available) {\r\n            setError(`Not enough available consecutive slots for ${durationHours} hour duration.`);\r\n            setTimeSlots(sortedSlots);\r\n            updateAvailableSlotsForDuration();\r\n            setSubmitting(false);\r\n            return;\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error checking time slot availability:\", error);\r\n      // Continue with reservation attempt\r\n    }\r\n    \r\n    // Authentication validation for logged-in users\r\n    if (isLoggedIn) {\r\n      const token = getToken();\r\n      if (!token) {\r\n        setError(\"Your session has expired. Please log in again.\");\r\n        setSubmitting(false);\r\n        return;\r\n      }\r\n      \r\n      // Verify token is still valid with backend\r\n      try {\r\n        const response = await fetch(`http://localhost:8000/api/v1/users/me`, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Authorization': `Bearer ${token}`\r\n          }\r\n        });\r\n        \r\n        if (!response.ok) {\r\n          console.error(\"Token validation failed:\", response.status);\r\n          setError(\"Your session is invalid. Please log in again.\");\r\n          setSubmitting(false);\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('isAuthenticated');\r\n          return;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Token validation request failed:\", error);\r\n        setError(\"Could not verify your session. Please try again.\");\r\n        setSubmitting(false);\r\n        return;\r\n      }\r\n    }\r\n    \r\n    // Prepare reservation data without timezone conversion\r\n    const [hours, minutes] = selectedTimeSlot.start_time.split(':').map(Number);\r\n    \r\n    // Create a date object with the selected date and time\r\n    const reservationDate = new Date(date);\r\n    reservationDate.setHours(hours, minutes, 0, 0);\r\n    \r\n    // Format date string in ISO format\r\n    const reservationTimeString = reservationDate.toISOString().slice(0, 19) + \".000Z\";\r\n    \r\n    console.log(\"Using reservation time:\", {\r\n      date: date,\r\n      time: selectedTimeSlot.start_time,\r\n      formattedTime: reservationTimeString,\r\n      duration: duration\r\n    });\r\n    \r\n    const reservationData = {\r\n      club_id: club.id,\r\n      reservation_time: reservationTimeString,\r\n      duration: parseFloat(duration),\r\n      payment_method: paymentMethod\r\n    };\r\n    \r\n    // Add guest name for non-logged in users\r\n    if (!isLoggedIn) {\r\n      reservationData.guest_name = guestName;\r\n    }\r\n    \r\n    console.log(\"Reservation data:\", reservationData);\r\n    \r\n    try {\r\n      const data = await reservationService.createReservation(reservationData);\r\n      console.log(\"Reservation created successfully:\", data);\r\n      \r\n      // Show success message\r\n      setSuccess(`Reservation created successfully for ${selectedTimeSlot.start_time} (${duration} hour${duration > 1 ? 's' : ''})!`);\r\n      \r\n      // Reset form\r\n      setSelectedTimeSlot(null);\r\n      setDuration(1);\r\n      setPaymentMethod(isLoggedIn ? \"cash\" : \"card\");\r\n      setGuestName(\"\");\r\n      \r\n      // Refresh the time slots to reflect the new reservation\r\n      fetchAvailableTimeSlots();\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error creating reservation:\", error);\r\n      if (error.status === 401) {\r\n        setError(\"You must be logged in to make a reservation. Please log in and try again.\");\r\n      } else if (error.status === 400 && error.message && error.message.includes(\"time slot is already booked\")) {\r\n        setError(\"This time slot is no longer available. Please select a different time.\");\r\n        // Refresh available slots to show updated availability\r\n        fetchAvailableTimeSlots();\r\n      } else {\r\n        setError(error.message || \"An error occurred during reservation creation\");\r\n      }\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n  \r\n  if (!isOpen) return null;\r\n  \r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50\">\r\n      <div className=\"bg-gray-900 rounded-lg p-6 w-full max-w-md max-h-[80vh] overflow-y-auto scrollbar-thin scrollbar-thumb-gray-600 scrollbar-track-gray-800\" style={{ maxHeight: \"calc(100vh - 100px)\" }}>\r\n        <div className=\"sticky top-0 bg-gray-900 pt-1 pb-3 border-b border-gray-700 mb-4 flex justify-between items-center\">\r\n          <h2 className=\"text-xl font-semibold text-gray-100\">Reserve {club.name}</h2>\r\n          <button \r\n            onClick={onClose}\r\n            className=\"text-gray-400 hover:text-white rounded-full hover:bg-gray-800 p-1 transition-colors\"\r\n          >\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n        \r\n        {error && (\r\n          <div className=\"bg-red-900/50 text-white p-3 rounded mb-4 border border-red-800\">\r\n            {error}\r\n          </div>\r\n        )}\r\n        \r\n        {success && (\r\n          <div className=\"bg-green-900/50 text-white p-3 rounded mb-4 border border-green-800\">\r\n            {success}\r\n          </div>\r\n        )}\r\n        \r\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"reservation-date\" className=\"block text-sm font-medium text-gray-300 mb-1\">\r\n              Date\r\n            </label>\r\n            <input\r\n              id=\"reservation-date\"\r\n              type=\"date\"\r\n              value={date}\r\n              onChange={(e) => setDate(e.target.value)}\r\n              min={format(new Date(), 'yyyy-MM-dd')}\r\n              className=\"w-full p-3 bg-gray-800 text-white rounded border border-gray-700 focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500\"\r\n              required\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"form-group\">\r\n            <label className=\"block text-sm font-medium text-gray-300 mb-1\">\r\n              Available Time Slots\r\n            </label>\r\n            {loading ? (\r\n              <div className=\"flex justify-center py-4\">\r\n                <div className=\"animate-spin rounded-full h-6 w-6 border-t-2 border-b-2 border-blue-500\"></div>\r\n              </div>\r\n            ) : timeSlots.length > 0 ? (\r\n              <div className=\"grid grid-cols-3 gap-2 mt-2\">\r\n                {timeSlots.map((slot, index) => (\r\n                  <button\r\n                    key={index}\r\n                    type=\"button\"\r\n                    disabled={!slot.is_available}\r\n                    onClick={() => setSelectedTimeSlot(slot)}\r\n                    className={`py-2 px-3 rounded text-center text-sm transition-colors ${\r\n                      selectedTimeSlot === slot\r\n                        ? 'bg-blue-600 text-white'\r\n                        : slot.is_available\r\n                        ? 'bg-gray-800 text-white hover:bg-gray-700'\r\n                        : 'bg-gray-900 text-gray-500 cursor-not-allowed border border-gray-800'\r\n                    }`}\r\n                  >\r\n                    {slot.start_time}\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            ) : (\r\n              <div className=\"bg-gray-800/50 border border-gray-700 rounded p-3 text-center\">\r\n                <p className=\"text-gray-400 text-sm\">No time slots available for this date</p>\r\n              </div>\r\n            )}\r\n          </div>\r\n          \r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"duration\" className=\"block text-sm font-medium text-gray-300 mb-1\">\r\n              Duration (hours)\r\n            </label>\r\n            <select\r\n              id=\"duration\"\r\n              value={duration}\r\n              onChange={(e) => setDuration(e.target.value)}\r\n              className=\"w-full p-3 bg-gray-800 text-white rounded border border-gray-700 focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500\"\r\n              required\r\n            >\r\n              <option value=\"1\">1 hour</option>\r\n              <option value=\"2\">2 hours</option>\r\n              <option value=\"3\">3 hours</option>\r\n              <option value=\"4\">4 hours</option>\r\n            </select>\r\n          </div>\r\n          \r\n          <div className=\"form-group\">\r\n            <label className=\"block text-sm font-medium text-gray-300 mb-1\">\r\n              Payment Method\r\n            </label>\r\n            <div className=\"flex space-x-4 mt-1\">\r\n              {isLoggedIn && (\r\n                <label className=\"inline-flex items-center rounded p-2 bg-gray-800 hover:bg-gray-700 transition-colors cursor-pointer\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    value=\"cash\"\r\n                    checked={paymentMethod === \"cash\"}\r\n                    onChange={() => setPaymentMethod(\"cash\")}\r\n                    className=\"text-blue-600\"\r\n                  />\r\n                  <span className=\"ml-2 text-gray-300\">Cash</span>\r\n                </label>\r\n              )}\r\n              <label className=\"inline-flex items-center rounded p-2 bg-gray-800 hover:bg-gray-700 transition-colors cursor-pointer\">\r\n                <input\r\n                  type=\"radio\"\r\n                  value=\"card\"\r\n                  checked={paymentMethod === \"card\"}\r\n                  onChange={() => setPaymentMethod(\"card\")}\r\n                  className=\"text-blue-600\"\r\n                />\r\n                <span className=\"ml-2 text-gray-300\">Card</span>\r\n              </label>\r\n            </div>\r\n          </div>\r\n          \r\n          {!isLoggedIn && (\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"guest-name\" className=\"block text-sm font-medium text-gray-300 mb-1\">\r\n                Your Name\r\n              </label>\r\n              <input\r\n                id=\"guest-name\"\r\n                type=\"text\"\r\n                value={guestName}\r\n                onChange={(e) => setGuestName(e.target.value)}\r\n                className=\"w-full p-3 bg-gray-800 text-white rounded border border-gray-700 focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500\"\r\n                placeholder=\"Enter your name\"\r\n                required\r\n              />\r\n              <p className=\"text-sm text-gray-400 mt-1\">Required for non-logged in users</p>\r\n            </div>\r\n          )}\r\n          \r\n          <div className=\"mt-4 mb-5\">\r\n            <div className=\"bg-gray-800/70 p-4 rounded border border-gray-700\">\r\n              <div className=\"flex justify-between items-center\">\r\n                <span className=\"text-gray-300\">Estimated Price:</span>\r\n                <span className=\"text-xl font-semibold text-blue-400\">${estimatedPrice.toFixed(2)}</span>\r\n              </div>\r\n              <p className=\"text-sm text-gray-400 mt-1\">\r\n                Based on {duration} hour{duration !== 1 ? 's' : ''} at ${club.hourly_price}/hour\r\n              </p>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"flex justify-end space-x-3 pt-2 border-t border-gray-700\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={onClose}\r\n              className=\"px-5 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded transition-colors\"\r\n              disabled={submitting}\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"px-5 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded transition-colors\"\r\n              disabled={submitting || !selectedTimeSlot || (!isLoggedIn && !guestName)}\r\n            >\r\n              {submitting ? 'Reserving...' : 'Reserve'}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReservationModal; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,MAAM,QAAQ,UAAU;AACjC,OAAOC,kBAAkB,MAAM,6BAA6B;AAC5D,SAASC,QAAQ,EAAEC,eAAe,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC,IAAI;EAAEC,MAAM;EAAEC,OAAO;EAAEC,UAAU;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5E,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAACE,MAAM,CAAC,IAAIe,IAAI,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;EAClE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACoB,OAAO,EAAEC,UAAU,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACsB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAM,CAACwB,QAAQ,EAAEC,WAAW,CAAC,GAAGzB,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAAC0B,aAAa,EAAEC,gBAAgB,CAAC,GAAG3B,QAAQ,CAACY,UAAU,GAAG,MAAM,GAAG,MAAM,CAAC;EAChF,MAAM,CAACgB,SAAS,EAAEC,YAAY,CAAC,GAAG7B,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAAC8B,cAAc,EAAEC,iBAAiB,CAAC,GAAG/B,QAAQ,CAAC,CAAC,CAAC;EACvD,MAAM,CAACgC,KAAK,EAAEC,QAAQ,CAAC,GAAGjC,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACkC,OAAO,EAAEC,UAAU,CAAC,GAAGnC,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACoC,UAAU,EAAEC,aAAa,CAAC,GAAGrC,QAAQ,CAAC,KAAK,CAAC;;EAEnD;EACAC,SAAS,CAAC,MAAM;IACd,IAAIS,MAAM,EAAE;MACV;MACAa,mBAAmB,CAAC,IAAI,CAAC;MACzBJ,YAAY,CAAC,EAAE,CAAC;MAChBH,OAAO,CAACd,MAAM,CAAC,IAAIe,IAAI,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;MACzCQ,WAAW,CAAC,CAAC,CAAC;MACdQ,QAAQ,CAAC,EAAE,CAAC;MACZE,UAAU,CAAC,EAAE,CAAC;;MAEd;MACA,MAAMG,SAAS,GAAGjC,eAAe,CAAC,CAAC;MACnC,IAAIO,UAAU,KAAK0B,SAAS,EAAE;QAC5BC,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;QAC7DC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;QACxB;MACF;;MAEA;MACAhB,gBAAgB,CAACW,SAAS,GAAG,MAAM,GAAG,MAAM,CAAC;IAC/C;EACF,CAAC,EAAE,CAAC5B,MAAM,EAAEE,UAAU,CAAC,CAAC;;EAExB;EACAX,SAAS,CAAC,MAAM;IACd,IAAIQ,IAAI,IAAIe,QAAQ,EAAE;MACpBO,iBAAiB,CAACa,UAAU,CAACnC,IAAI,CAACoC,YAAY,CAAC,GAAGD,UAAU,CAACpB,QAAQ,CAAC,CAAC;IACzE;;IAEA;IACA,IAAIA,QAAQ,IAAIN,SAAS,CAAC4B,MAAM,GAAG,CAAC,EAAE;MACpCC,+BAA+B,CAAC,CAAC;IACnC;EACF,CAAC,EAAE,CAACtC,IAAI,EAAEe,QAAQ,EAAEN,SAAS,CAAC4B,MAAM,CAAC,CAAC;;EAEtC;EACA7C,SAAS,CAAC,MAAM;IACd,IAAIS,MAAM,IAAID,IAAI,IAAIM,IAAI,EAAE;MAC1B;MACAQ,mBAAmB,CAAC,IAAI,CAAC;MACzByB,uBAAuB,CAAC,CAAC;IAC3B;EACF,CAAC,EAAE,CAACjC,IAAI,EAAEN,IAAI,EAAEC,MAAM,CAAC,CAAC;;EAExB;EACA,MAAMqC,+BAA+B,GAAGA,CAAA,KAAM;IAC5C,IAAI,CAAC7B,SAAS,CAAC4B,MAAM,EAAE;;IAEvB;IACA,MAAMG,aAAa,GAAG,CAAC,GAAG/B,SAAS,CAAC;IACpC,MAAMgC,aAAa,GAAGC,QAAQ,CAAC3B,QAAQ,CAAC;;IAExC;IACA,MAAM4B,YAAY,GAAGH,aAAa,CAACI,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;MACtD;MACA,IAAI,CAACD,IAAI,CAACE,YAAY,EAAE;QACtB,OAAOF,IAAI;MACb;;MAEA;MACA,IAAIG,cAAc,GAAG,IAAI;MACzB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,aAAa,EAAEQ,CAAC,EAAE,EAAE;QACtC;QACA;QACA,MAAMC,WAAW,GAAGR,QAAQ,CAACG,IAAI,CAACM,UAAU,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3D,MAAMC,QAAQ,GAAGH,WAAW,GAAGD,CAAC;QAChC,MAAMK,cAAc,GAAG,GAAGD,QAAQ,CAACE,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK;;QAEnE;QACA,MAAMC,QAAQ,GAAGjB,aAAa,CAACkB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACR,UAAU,KAAKG,cAAc,CAAC;;QAEzE;QACA,IAAI,CAACG,QAAQ,IAAI,CAACA,QAAQ,CAACV,YAAY,EAAE;UACvCC,cAAc,GAAG,KAAK;UACtB;QACF;MACF;MAEA,OAAO;QACL,GAAGH,IAAI;QACPE,YAAY,EAAEC;MAChB,CAAC;IACH,CAAC,CAAC;IAEFlB,OAAO,CAACC,GAAG,CAAC,qCAAqCU,aAAa,SAAS,EACrEE,YAAY,CAACiB,MAAM,CAACD,CAAC,IAAIA,CAAC,CAACZ,YAAY,CAAC,CAACH,GAAG,CAACe,CAAC,IAAIA,CAAC,CAACR,UAAU,CAAC,CAAC;IAElEzC,YAAY,CAACiC,YAAY,CAAC;EAC5B,CAAC;EAED,MAAMJ,uBAAuB,GAAG,MAAAA,CAAA,KAAY;IAC1C3B,UAAU,CAAC,IAAI,CAAC;IAChBY,QAAQ,CAAC,EAAE,CAAC;IACZV,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3BJ,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;;IAElB,IAAI;MACFoB,OAAO,CAACC,GAAG,CAAC,qCAAqC/B,IAAI,CAAC6D,EAAE,YAAYvD,IAAI,EAAE,CAAC;MAC3E,MAAMwD,IAAI,GAAG,MAAMpE,kBAAkB,CAACqE,qBAAqB,CAAC/D,IAAI,CAAC6D,EAAE,EAAEvD,IAAI,CAAC;MAC1EwB,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE+B,IAAI,CAAC;MAE1C,IAAIE,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,EAAE;QACvB;QACA,MAAMI,UAAU,GAAG,CAAC,GAAGJ,IAAI,CAAC,CAACK,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;UAC1C,MAAMC,KAAK,GAAG5B,QAAQ,CAAC0B,CAAC,CAACjB,UAAU,CAACoB,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;UACrD,MAAMC,KAAK,GAAG9B,QAAQ,CAAC2B,CAAC,CAAClB,UAAU,CAACoB,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;UACrD,OAAOD,KAAK,GAAGE,KAAK;QACtB,CAAC,CAAC;;QAEF;QACA9D,YAAY,CAACwD,UAAU,CAAC;;QAExB;QACAO,UAAU,CAAC,MAAM;UACfnC,+BAA+B,CAAC,CAAC;QACnC,CAAC,EAAE,CAAC,CAAC;MACP,CAAC,MAAM;QACL5B,YAAY,CAAC,EAAE,CAAC;MAClB;IACF,CAAC,CAAC,OAAOa,KAAK,EAAE;MACdO,OAAO,CAACP,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClDC,QAAQ,CAACD,KAAK,CAACmD,OAAO,IAAI,uDAAuD,CAAC;IACpF,CAAC,SAAS;MACR9D,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAM+D,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBrD,QAAQ,CAAC,EAAE,CAAC;IACZE,UAAU,CAAC,EAAE,CAAC;IACdE,aAAa,CAAC,IAAI,CAAC;IAEnBE,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;;IAEzC;IACA,IAAI,CAAClB,gBAAgB,EAAE;MACrBW,QAAQ,CAAC,2BAA2B,CAAC;MACrCI,aAAa,CAAC,KAAK,CAAC;MACpB;IACF;IAEA,IAAI,CAACzB,UAAU,IAAI,CAACgB,SAAS,EAAE;MAC7BK,QAAQ,CAAC,4CAA4C,CAAC;MACtDI,aAAa,CAAC,KAAK,CAAC;MACpB;IACF;IAEA,IAAI,CAACzB,UAAU,IAAIc,aAAa,KAAK,MAAM,EAAE;MAC3CO,QAAQ,CAAC,0CAA0C,CAAC;MACpDI,aAAa,CAAC,KAAK,CAAC;MACpB;IACF;;IAEA;IACA,IAAI;MACF;MACA,MAAMe,YAAY,GAAG,MAAMjD,kBAAkB,CAACqE,qBAAqB,CAAC/D,IAAI,CAAC6D,EAAE,EAAEvD,IAAI,CAAC;;MAElF;MACA,MAAMwE,WAAW,GAAG,CAAC,GAAGnC,YAAY,CAAC,CAACwB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QACnD,OAAO3B,QAAQ,CAAC0B,CAAC,CAACjB,UAAU,CAACoB,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,GAAG7B,QAAQ,CAAC2B,CAAC,CAAClB,UAAU,CAACoB,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;MAC1F,CAAC,CAAC;;MAEF;MACA,MAAMQ,YAAY,GAAGlE,gBAAgB,CAACsC,UAAU;MAChD,MAAM6B,YAAY,GAAGF,WAAW,CAACpB,IAAI,CAACb,IAAI,IAAIA,IAAI,CAACM,UAAU,KAAK4B,YAAY,CAAC;;MAE/E;MACA,IAAI,CAACC,YAAY,IAAI,CAACA,YAAY,CAACjC,YAAY,EAAE;QAC/CvB,QAAQ,CAAC,wEAAwE,CAAC;QAClFV,mBAAmB,CAAC,IAAI,CAAC;QACzBJ,YAAY,CAACoE,WAAW,CAAC;QACzBxC,+BAA+B,CAAC,CAAC;QACjCV,aAAa,CAAC,KAAK,CAAC;QACpB;MACF;;MAEA;MACA,MAAMa,aAAa,GAAGC,QAAQ,CAAC3B,QAAQ,CAAC;MACxC,IAAI0B,aAAa,GAAG,CAAC,EAAE;QACrB,MAAMS,WAAW,GAAGR,QAAQ,CAACqC,YAAY,CAAC3B,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;;QAExD;QACA,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,aAAa,EAAEQ,CAAC,EAAE,EAAE;UACtC,MAAMI,QAAQ,GAAGH,WAAW,GAAGD,CAAC;UAChC,MAAMK,cAAc,GAAG,GAAGD,QAAQ,CAACE,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK;UACnE,MAAMC,QAAQ,GAAGqB,WAAW,CAACpB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACR,UAAU,KAAKG,cAAc,CAAC;UAEvE,IAAI,CAACG,QAAQ,IAAI,CAACA,QAAQ,CAACV,YAAY,EAAE;YACvCvB,QAAQ,CAAC,8CAA8CiB,aAAa,iBAAiB,CAAC;YACtF/B,YAAY,CAACoE,WAAW,CAAC;YACzBxC,+BAA+B,CAAC,CAAC;YACjCV,aAAa,CAAC,KAAK,CAAC;YACpB;UACF;QACF;MACF;IACF,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdO,OAAO,CAACP,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;MAC9D;IACF;;IAEA;IACA,IAAIpB,UAAU,EAAE;MACd,MAAM8E,KAAK,GAAGtF,QAAQ,CAAC,CAAC;MACxB,IAAI,CAACsF,KAAK,EAAE;QACVzD,QAAQ,CAAC,gDAAgD,CAAC;QAC1DI,aAAa,CAAC,KAAK,CAAC;QACpB;MACF;;MAEA;MACA,IAAI;QACF,MAAMsD,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAE;UACpEC,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YACP,eAAe,EAAE,UAAUJ,KAAK;UAClC;QACF,CAAC,CAAC;QAEF,IAAI,CAACC,QAAQ,CAACI,EAAE,EAAE;UAChBxD,OAAO,CAACP,KAAK,CAAC,0BAA0B,EAAE2D,QAAQ,CAACK,MAAM,CAAC;UAC1D/D,QAAQ,CAAC,+CAA+C,CAAC;UACzDI,aAAa,CAAC,KAAK,CAAC;UACpB4D,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;UAChCD,YAAY,CAACC,UAAU,CAAC,iBAAiB,CAAC;UAC1C;QACF;MACF,CAAC,CAAC,OAAOlE,KAAK,EAAE;QACdO,OAAO,CAACP,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;QACxDC,QAAQ,CAAC,kDAAkD,CAAC;QAC5DI,aAAa,CAAC,KAAK,CAAC;QACpB;MACF;IACF;;IAEA;IACA,MAAM,CAAC8D,KAAK,EAAEC,OAAO,CAAC,GAAG9E,gBAAgB,CAACsC,UAAU,CAACC,KAAK,CAAC,GAAG,CAAC,CAACR,GAAG,CAACgD,MAAM,CAAC;;IAE3E;IACA,MAAMC,eAAe,GAAG,IAAIrF,IAAI,CAACF,IAAI,CAAC;IACtCuF,eAAe,CAACC,QAAQ,CAACJ,KAAK,EAAEC,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;;IAE9C;IACA,MAAMI,qBAAqB,GAAGF,eAAe,CAACG,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,OAAO;IAElFnE,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAE;MACrCzB,IAAI,EAAEA,IAAI;MACV4F,IAAI,EAAErF,gBAAgB,CAACsC,UAAU;MACjCgD,aAAa,EAAEJ,qBAAqB;MACpChF,QAAQ,EAAEA;IACZ,CAAC,CAAC;IAEF,MAAMqF,eAAe,GAAG;MACtBC,OAAO,EAAErG,IAAI,CAAC6D,EAAE;MAChByC,gBAAgB,EAAEP,qBAAqB;MACvChF,QAAQ,EAAEoB,UAAU,CAACpB,QAAQ,CAAC;MAC9BwF,cAAc,EAAEtF;IAClB,CAAC;;IAED;IACA,IAAI,CAACd,UAAU,EAAE;MACfiG,eAAe,CAACI,UAAU,GAAGrF,SAAS;IACxC;IAEAW,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEqE,eAAe,CAAC;IAEjD,IAAI;MACF,MAAMtC,IAAI,GAAG,MAAMpE,kBAAkB,CAAC+G,iBAAiB,CAACL,eAAe,CAAC;MACxEtE,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAE+B,IAAI,CAAC;;MAEtD;MACApC,UAAU,CAAC,wCAAwCb,gBAAgB,CAACsC,UAAU,KAAKpC,QAAQ,QAAQA,QAAQ,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC;;MAE/H;MACAD,mBAAmB,CAAC,IAAI,CAAC;MACzBE,WAAW,CAAC,CAAC,CAAC;MACdE,gBAAgB,CAACf,UAAU,GAAG,MAAM,GAAG,MAAM,CAAC;MAC9CiB,YAAY,CAAC,EAAE,CAAC;;MAEhB;MACAmB,uBAAuB,CAAC,CAAC;IAE3B,CAAC,CAAC,OAAOhB,KAAK,EAAE;MACdO,OAAO,CAACP,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,IAAIA,KAAK,CAACgE,MAAM,KAAK,GAAG,EAAE;QACxB/D,QAAQ,CAAC,2EAA2E,CAAC;MACvF,CAAC,MAAM,IAAID,KAAK,CAACgE,MAAM,KAAK,GAAG,IAAIhE,KAAK,CAACmD,OAAO,IAAInD,KAAK,CAACmD,OAAO,CAACgC,QAAQ,CAAC,6BAA6B,CAAC,EAAE;QACzGlF,QAAQ,CAAC,wEAAwE,CAAC;QAClF;QACAe,uBAAuB,CAAC,CAAC;MAC3B,CAAC,MAAM;QACLf,QAAQ,CAACD,KAAK,CAACmD,OAAO,IAAI,+CAA+C,CAAC;MAC5E;IACF,CAAC,SAAS;MACR9C,aAAa,CAAC,KAAK,CAAC;IACtB;EACF,CAAC;EAED,IAAI,CAAC3B,MAAM,EAAE,OAAO,IAAI;EAExB,oBACEH,OAAA;IAAK6G,SAAS,EAAC,4EAA4E;IAAAC,QAAA,eACzF9G,OAAA;MAAK6G,SAAS,EAAC,0IAA0I;MAACE,KAAK,EAAE;QAAEC,SAAS,EAAE;MAAsB,CAAE;MAAAF,QAAA,gBACpM9G,OAAA;QAAK6G,SAAS,EAAC,oGAAoG;QAAAC,QAAA,gBACjH9G,OAAA;UAAI6G,SAAS,EAAC,qCAAqC;UAAAC,QAAA,GAAC,UAAQ,EAAC5G,IAAI,CAAC+G,IAAI;QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC5ErH,OAAA;UACEsH,OAAO,EAAElH,OAAQ;UACjByG,SAAS,EAAC,qFAAqF;UAAAC,QAAA,eAE/F9G,OAAA;YAAKuH,KAAK,EAAC,4BAA4B;YAACV,SAAS,EAAC,SAAS;YAACW,IAAI,EAAC,MAAM;YAACC,OAAO,EAAC,WAAW;YAACC,MAAM,EAAC,cAAc;YAAAZ,QAAA,eAC/G9G,OAAA;cAAM2H,aAAa,EAAC,OAAO;cAACC,cAAc,EAAC,OAAO;cAACC,WAAW,EAAE,CAAE;cAACC,CAAC,EAAC;YAAsB;cAAAZ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC3F;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,EAEL5F,KAAK,iBACJzB,OAAA;QAAK6G,SAAS,EAAC,iEAAiE;QAAAC,QAAA,EAC7ErF;MAAK;QAAAyF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CACN,EAEA1F,OAAO,iBACN3B,OAAA;QAAK6G,SAAS,EAAC,qEAAqE;QAAAC,QAAA,EACjFnF;MAAO;QAAAuF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CACN,eAEDrH,OAAA;QAAM+H,QAAQ,EAAElD,YAAa;QAACgC,SAAS,EAAC,WAAW;QAAAC,QAAA,gBACjD9G,OAAA;UAAK6G,SAAS,EAAC,YAAY;UAAAC,QAAA,gBACzB9G,OAAA;YAAOgI,OAAO,EAAC,kBAAkB;YAACnB,SAAS,EAAC,8CAA8C;YAAAC,QAAA,EAAC;UAE3F;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACRrH,OAAA;YACE+D,EAAE,EAAC,kBAAkB;YACrBkE,IAAI,EAAC,MAAM;YACXC,KAAK,EAAE1H,IAAK;YACZ2H,QAAQ,EAAGrD,CAAC,IAAKrE,OAAO,CAACqE,CAAC,CAACsD,MAAM,CAACF,KAAK,CAAE;YACzCG,GAAG,EAAE1I,MAAM,CAAC,IAAIe,IAAI,CAAC,CAAC,EAAE,YAAY,CAAE;YACtCmG,SAAS,EAAC,4IAA4I;YACtJyB,QAAQ;UAAA;YAAApB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACT,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eAENrH,OAAA;UAAK6G,SAAS,EAAC,YAAY;UAAAC,QAAA,gBACzB9G,OAAA;YAAO6G,SAAS,EAAC,8CAA8C;YAAAC,QAAA,EAAC;UAEhE;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,EACPxG,OAAO,gBACNb,OAAA;YAAK6G,SAAS,EAAC,0BAA0B;YAAAC,QAAA,eACvC9G,OAAA;cAAK6G,SAAS,EAAC;YAAyE;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5F,CAAC,GACJ1G,SAAS,CAAC4B,MAAM,GAAG,CAAC,gBACtBvC,OAAA;YAAK6G,SAAS,EAAC,6BAA6B;YAAAC,QAAA,EACzCnG,SAAS,CAACmC,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACzBhD,OAAA;cAEEiI,IAAI,EAAC,QAAQ;cACbM,QAAQ,EAAE,CAACxF,IAAI,CAACE,YAAa;cAC7BqE,OAAO,EAAEA,CAAA,KAAMtG,mBAAmB,CAAC+B,IAAI,CAAE;cACzC8D,SAAS,EAAE,2DACT9F,gBAAgB,KAAKgC,IAAI,GACrB,wBAAwB,GACxBA,IAAI,CAACE,YAAY,GACjB,0CAA0C,GAC1C,qEAAqE,EACxE;cAAA6D,QAAA,EAEF/D,IAAI,CAACM;YAAU,GAZXL,KAAK;cAAAkE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAaJ,CACT;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC,gBAENrH,OAAA;YAAK6G,SAAS,EAAC,+DAA+D;YAAAC,QAAA,eAC5E9G,OAAA;cAAG6G,SAAS,EAAC,uBAAuB;cAAAC,QAAA,EAAC;YAAqC;cAAAI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC3E,CACN;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC,eAENrH,OAAA;UAAK6G,SAAS,EAAC,YAAY;UAAAC,QAAA,gBACzB9G,OAAA;YAAOgI,OAAO,EAAC,UAAU;YAACnB,SAAS,EAAC,8CAA8C;YAAAC,QAAA,EAAC;UAEnF;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACRrH,OAAA;YACE+D,EAAE,EAAC,UAAU;YACbmE,KAAK,EAAEjH,QAAS;YAChBkH,QAAQ,EAAGrD,CAAC,IAAK5D,WAAW,CAAC4D,CAAC,CAACsD,MAAM,CAACF,KAAK,CAAE;YAC7CrB,SAAS,EAAC,4IAA4I;YACtJyB,QAAQ;YAAAxB,QAAA,gBAER9G,OAAA;cAAQkI,KAAK,EAAC,GAAG;cAAApB,QAAA,EAAC;YAAM;cAAAI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACjCrH,OAAA;cAAQkI,KAAK,EAAC,GAAG;cAAApB,QAAA,EAAC;YAAO;cAAAI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAClCrH,OAAA;cAAQkI,KAAK,EAAC,GAAG;cAAApB,QAAA,EAAC;YAAO;cAAAI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAClCrH,OAAA;cAAQkI,KAAK,EAAC,GAAG;cAAApB,QAAA,EAAC;YAAO;cAAAI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5B,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eAENrH,OAAA;UAAK6G,SAAS,EAAC,YAAY;UAAAC,QAAA,gBACzB9G,OAAA;YAAO6G,SAAS,EAAC,8CAA8C;YAAAC,QAAA,EAAC;UAEhE;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACRrH,OAAA;YAAK6G,SAAS,EAAC,qBAAqB;YAAAC,QAAA,GACjCzG,UAAU,iBACTL,OAAA;cAAO6G,SAAS,EAAC,qGAAqG;cAAAC,QAAA,gBACpH9G,OAAA;gBACEiI,IAAI,EAAC,OAAO;gBACZC,KAAK,EAAC,MAAM;gBACZM,OAAO,EAAErH,aAAa,KAAK,MAAO;gBAClCgH,QAAQ,EAAEA,CAAA,KAAM/G,gBAAgB,CAAC,MAAM,CAAE;gBACzCyF,SAAS,EAAC;cAAe;gBAAAK,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC1B,CAAC,eACFrH,OAAA;gBAAM6G,SAAS,EAAC,oBAAoB;gBAAAC,QAAA,EAAC;cAAI;gBAAAI,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC3C,CACR,eACDrH,OAAA;cAAO6G,SAAS,EAAC,qGAAqG;cAAAC,QAAA,gBACpH9G,OAAA;gBACEiI,IAAI,EAAC,OAAO;gBACZC,KAAK,EAAC,MAAM;gBACZM,OAAO,EAAErH,aAAa,KAAK,MAAO;gBAClCgH,QAAQ,EAAEA,CAAA,KAAM/G,gBAAgB,CAAC,MAAM,CAAE;gBACzCyF,SAAS,EAAC;cAAe;gBAAAK,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC1B,CAAC,eACFrH,OAAA;gBAAM6G,SAAS,EAAC,oBAAoB;gBAAAC,QAAA,EAAC;cAAI;gBAAAI,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC3C,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,EAEL,CAAChH,UAAU,iBACVL,OAAA;UAAK6G,SAAS,EAAC,YAAY;UAAAC,QAAA,gBACzB9G,OAAA;YAAOgI,OAAO,EAAC,YAAY;YAACnB,SAAS,EAAC,8CAA8C;YAAAC,QAAA,EAAC;UAErF;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACRrH,OAAA;YACE+D,EAAE,EAAC,YAAY;YACfkE,IAAI,EAAC,MAAM;YACXC,KAAK,EAAE7G,SAAU;YACjB8G,QAAQ,EAAGrD,CAAC,IAAKxD,YAAY,CAACwD,CAAC,CAACsD,MAAM,CAACF,KAAK,CAAE;YAC9CrB,SAAS,EAAC,4IAA4I;YACtJ4B,WAAW,EAAC,iBAAiB;YAC7BH,QAAQ;UAAA;YAAApB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACT,CAAC,eACFrH,OAAA;YAAG6G,SAAS,EAAC,4BAA4B;YAAAC,QAAA,EAAC;UAAgC;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3E,CACN,eAEDrH,OAAA;UAAK6G,SAAS,EAAC,WAAW;UAAAC,QAAA,eACxB9G,OAAA;YAAK6G,SAAS,EAAC,mDAAmD;YAAAC,QAAA,gBAChE9G,OAAA;cAAK6G,SAAS,EAAC,mCAAmC;cAAAC,QAAA,gBAChD9G,OAAA;gBAAM6G,SAAS,EAAC,eAAe;gBAAAC,QAAA,EAAC;cAAgB;gBAAAI,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eACvDrH,OAAA;gBAAM6G,SAAS,EAAC,qCAAqC;gBAAAC,QAAA,GAAC,GAAC,EAACvF,cAAc,CAACmH,OAAO,CAAC,CAAC,CAAC;cAAA;gBAAAxB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACtF,CAAC,eACNrH,OAAA;cAAG6G,SAAS,EAAC,4BAA4B;cAAAC,QAAA,GAAC,WAC/B,EAAC7F,QAAQ,EAAC,OAAK,EAACA,QAAQ,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE,EAAC,OAAK,EAACf,IAAI,CAACoC,YAAY,EAAC,OAC7E;YAAA;cAAA4E,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACD;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eAENrH,OAAA;UAAK6G,SAAS,EAAC,0DAA0D;UAAAC,QAAA,gBACvE9G,OAAA;YACEiI,IAAI,EAAC,QAAQ;YACbX,OAAO,EAAElH,OAAQ;YACjByG,SAAS,EAAC,8EAA8E;YACxF0B,QAAQ,EAAE1G,UAAW;YAAAiF,QAAA,EACtB;UAED;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACTrH,OAAA;YACEiI,IAAI,EAAC,QAAQ;YACbpB,SAAS,EAAC,8EAA8E;YACxF0B,QAAQ,EAAE1G,UAAU,IAAI,CAACd,gBAAgB,IAAK,CAACV,UAAU,IAAI,CAACgB,SAAW;YAAAyF,QAAA,EAExEjF,UAAU,GAAG,cAAc,GAAG;UAAS;YAAAqF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAClC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC9G,EAAA,CA7eIN,gBAAgB;AAAA0I,EAAA,GAAhB1I,gBAAgB;AA+etB,eAAeA,gBAAgB;AAAC,IAAA0I,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}