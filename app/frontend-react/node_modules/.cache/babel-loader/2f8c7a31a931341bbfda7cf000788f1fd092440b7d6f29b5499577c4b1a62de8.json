{"ast":null,"code":"// api.js - Comprehensive API client for FastAPI backend\n\nimport { getToken } from './auth';\n\n// Base API URL - use explicit URL instead of relying on proxy which might not be working\nexport const API_BASE = 'http://localhost:8000';\nexport const API_PATH = '/api/v1'; // Keep v1 as it's needed based on the backend\n\n/**\r\n * Core API request function with automatic token handling\r\n */\nexport async function apiRequest(path, {\n  method = 'GET',\n  body,\n  token,\n  headers = {}\n} = {}) {\n  // Get token from auth utility if not provided explicitly\n  const authToken = token || getToken();\n\n  // Build headers with auth token if available\n  const requestHeaders = {\n    'Content-Type': 'application/json',\n    ...headers\n  };\n  if (authToken) {\n    requestHeaders['Authorization'] = `Bearer ${authToken}`;\n  }\n\n  // Build the full URL\n  const url = `${API_BASE}${path}`;\n  try {\n    console.log(`Making ${method} request to ${url}`, {\n      method,\n      headers: {\n        ...requestHeaders,\n        Authorization: authToken ? 'Bearer [HIDDEN]' : undefined\n      },\n      bodyPreview: body ? JSON.stringify(body).substring(0, 100) + (JSON.stringify(body).length > 100 ? '...' : '') : undefined\n    });\n    const response = await fetch(url, {\n      method,\n      headers: requestHeaders,\n      body: body ? JSON.stringify(body) : undefined\n    });\n\n    // Log response status for debugging\n    console.log(`Response status: ${response.status} ${response.statusText}`);\n\n    // Get the response text first\n    const responseText = await response.text();\n\n    // Try to parse it as JSON\n    let data;\n    try {\n      data = JSON.parse(responseText);\n    } catch (e) {\n      console.log(\"Response is not JSON:\", responseText.substring(0, 500) + (responseText.length > 500 ? '...' : ''));\n      data = {\n        detail: responseText\n      };\n    }\n\n    // Log response data for debugging\n    console.log(\"Response data preview:\", typeof data === 'object' ? JSON.stringify(data).substring(0, 200) + (JSON.stringify(data).length > 200 ? '...' : '') : data);\n\n    // Handle API errors\n    if (!response.ok) {\n      if (response.status === 404) {\n        // For 404s, return a standard response instead of throwing\n        // This is useful for endpoints that might not exist in development\n        if (method === 'GET') {\n          console.log(\"Resource not found but handling gracefully\");\n          return Array.isArray(data) ? [] : {};\n        }\n      }\n      const error = {\n        status: response.status,\n        data,\n        message: data.detail || data.message || `Error ${response.status}: ${response.statusText}`\n      };\n      console.error('API error:', error);\n\n      // Special handling for 500 errors to give more details\n      if (response.status >= 500) {\n        console.error('Server error details:', data);\n      }\n      throw error;\n    }\n    return data;\n  } catch (error) {\n    // Enhance error with additional info if it's not already our format\n    if (!error.status) {\n      console.error('API request failed:', error);\n      throw {\n        status: 0,\n        message: error.message || 'Network error, please check your connection',\n        data: {}\n      };\n    }\n    throw error;\n  }\n}\n\n// Authentication API\nexport const authAPI = {\n  // Direct login implementation using fetch\n  login: async (email, password) => {\n    console.log(`Attempting login for email: ${email} with direct fetch`);\n    try {\n      var _data$user, _data$user2;\n      // Show detailed request info for debugging\n      const requestData = {\n        email,\n        password\n      };\n      console.log(\"Login request data:\", {\n        email,\n        passwordLength: password === null || password === void 0 ? void 0 : password.length\n      });\n      console.log(\"API endpoint:\", `${API_BASE}${API_PATH}/auth/login`);\n      const response = await fetch(`${API_BASE}${API_PATH}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestData),\n        credentials: 'include'\n      });\n      console.log(`Login response status: ${response.status} ${response.statusText}`);\n      console.log(\"Response headers:\", Array.from(response.headers.entries()).map(([key, value]) => `${key}: ${key.toLowerCase() === 'set-cookie' ? '[COOKIE DATA]' : value}`).join(', '));\n      if (!response.ok) {\n        const errorText = await response.text();\n        let errorData;\n        try {\n          errorData = JSON.parse(errorText);\n        } catch (e) {\n          console.error(\"Error response is not valid JSON:\", errorText);\n          errorData = {\n            detail: errorText\n          };\n        }\n        console.error(\"Login error:\", errorData);\n        throw {\n          status: response.status,\n          message: errorData.detail || `Error ${response.status}: ${response.statusText}`,\n          data: errorData\n        };\n      }\n      const responseText = await response.text();\n      let data;\n      try {\n        data = JSON.parse(responseText);\n      } catch (e) {\n        console.error(\"Response is not valid JSON:\", responseText);\n        throw {\n          status: 500,\n          message: \"Invalid response format from server\",\n          data: {\n            detail: responseText\n          }\n        };\n      }\n      console.log(\"Login successful, received data:\", {\n        hasToken: !!data.access_token,\n        hasUser: !!data.user,\n        userId: (_data$user = data.user) === null || _data$user === void 0 ? void 0 : _data$user.id,\n        username: (_data$user2 = data.user) === null || _data$user2 === void 0 ? void 0 : _data$user2.username\n      });\n      return data;\n    } catch (error) {\n      console.error(\"Login failed:\", error);\n      throw error;\n    }\n  },\n  register: userData => apiRequest(`${API_PATH}/auth/register`, {\n    method: 'POST',\n    body: userData\n  }),\n  getCurrentUser: () => apiRequest(`${API_PATH}/users/me`, {\n    method: 'GET'\n  }),\n  // Method to validate if current authentication is valid\n  validateAuth: async () => {\n    console.log(\"Validating current authentication state\");\n    try {\n      // Attempt to get current user info to validate auth\n      const userData = await apiRequest(`${API_PATH}/users/me`, {\n        method: 'GET'\n      });\n      console.log(\"Auth validation successful:\", userData);\n      return {\n        isValid: true,\n        userData\n      };\n    } catch (error) {\n      console.error(\"Auth validation failed:\", error);\n      return {\n        isValid: false,\n        error\n      };\n    }\n  },\n  updateProfile: userData => apiRequest(`${API_PATH}/users/me`, {\n    method: 'PUT',\n    body: userData\n  }),\n  // Google OAuth endpoints\n  googleLogin: () => {\n    const url = `${API_BASE}${API_PATH}/auth/google/login`;\n    console.log(`Redirecting to Google OAuth: ${url}`);\n    window.location.href = url;\n  },\n  // This handles the redirect back from Google after authentication\n  handleGoogleCallback: async code => {\n    try {\n      console.log('Calling handleGoogleCallback with code:', code);\n      const data = await apiRequest(`${API_PATH}/auth/google/token-exchange`, {\n        method: 'POST',\n        body: {\n          code\n        }\n      });\n      console.log('Google callback response:', data);\n      return data;\n    } catch (error) {\n      console.error('Google OAuth callback error:', error);\n      throw error;\n    }\n  }\n};\n\n// Clubs API\nexport const clubsAPI = {\n  getAllClubs: (filters = {}) => {\n    // Convert filters object to URL params\n    const params = new URLSearchParams();\n    Object.entries(filters).forEach(([key, value]) => {\n      if (value !== undefined && value !== null && value !== '') {\n        params.append(key, value);\n      }\n    });\n    const queryString = params.toString() ? `?${params.toString()}` : '';\n    return apiRequest(`${API_PATH}/clubs${queryString}`);\n  },\n  getClubById: clubId => apiRequest(`${API_PATH}/clubs/${clubId}`),\n  createClub: clubData => {\n    console.log(\"Calling createClub API with data:\", clubData);\n    // Make sure the URL matches exactly what the backend expects\n    return apiRequest(`${API_PATH}/clubs/`, {\n      // Add trailing slash to match FastAPI endpoint\n      method: 'POST',\n      body: clubData\n    });\n  },\n  updateClub: (clubId, clubData) => {\n    console.log(`Updating club ${clubId} with data:`, clubData);\n    return apiRequest(`${API_PATH}/clubs/${clubId}`, {\n      method: 'PUT',\n      body: clubData\n    });\n  },\n  deleteClub: clubId => apiRequest(`${API_PATH}/clubs/${clubId}`, {\n    method: 'DELETE'\n  }),\n  getClubsByOwner: () => apiRequest(`${API_PATH}/clubs/my-clubs`),\n  removePicture: (clubId, pictureUrl) => apiRequest(`${API_PATH}/clubs/${clubId}/pictures?picture_url=${encodeURIComponent(pictureUrl)}`, {\n    method: 'DELETE'\n  }),\n  joinClub: clubId => apiRequest(`${API_PATH}/clubs/${clubId}/join`, {\n    method: 'POST'\n  })\n};\n\n// Reviews and Comments API\nexport const reviewsAPI = {\n  // Get all reviews for a club\n  getClubReviews: clubId => apiRequest(`${API_PATH}/reviews/club/${clubId}`),\n  // Create a new review\n  createReview: reviewData => {\n    console.log(\"Creating review with data:\", reviewData);\n    return apiRequest(`${API_PATH}/reviews/`, {\n      method: 'POST',\n      body: reviewData\n    });\n  },\n  // Get average rating for a club\n  getClubRating: clubId => apiRequest(`${API_PATH}/reviews/club/${clubId}/rating`),\n  // Get all comments for a club\n  getClubComments: clubId => apiRequest(`${API_PATH}/reviews/club/${clubId}/comments`),\n  // Create a new comment\n  createComment: commentData => {\n    console.log(\"Creating comment with data:\", commentData);\n    return apiRequest(`${API_PATH}/reviews/comments`, {\n      method: 'POST',\n      body: commentData\n    });\n  }\n};\n\n// Reservations API\nexport const reservationsAPI = {\n  getMyReservations: async () => {\n    try {\n      return await apiRequest(`${API_PATH}/reservations/my-reservations`);\n    } catch (error) {\n      console.log('Reservations API might not be implemented yet:', error);\n      // Return empty array instead of throwing when endpoint doesn't exist\n      if (error.status === 404 || error.status === 405) {\n        return [];\n      }\n      throw error;\n    }\n  },\n  createReservation: reservationData => {\n    console.log(\"Creating reservation with data:\", reservationData);\n    return apiRequest(`${API_PATH}/reservations/`, {\n      method: 'POST',\n      body: reservationData\n    });\n  },\n  getAvailableTimeSlots: (clubId, date) => {\n    console.log(`Getting available slots for club ${clubId} on date ${date}`);\n    return apiRequest(`${API_PATH}/reservations/available-slots/${clubId}?date=${date}`);\n  }\n};\nexport default {\n  apiRequest,\n  auth: authAPI,\n  clubs: clubsAPI,\n  reservations: reservationsAPI,\n  reviews: reviewsAPI\n};","map":{"version":3,"names":["getToken","API_BASE","API_PATH","apiRequest","path","method","body","token","headers","authToken","requestHeaders","url","console","log","Authorization","undefined","bodyPreview","JSON","stringify","substring","length","response","fetch","status","statusText","responseText","text","data","parse","e","detail","ok","Array","isArray","error","message","authAPI","login","email","password","_data$user","_data$user2","requestData","passwordLength","credentials","from","entries","map","key","value","toLowerCase","join","errorText","errorData","hasToken","access_token","hasUser","user","userId","id","username","register","userData","getCurrentUser","validateAuth","isValid","updateProfile","googleLogin","window","location","href","handleGoogleCallback","code","clubsAPI","getAllClubs","filters","params","URLSearchParams","Object","forEach","append","queryString","toString","getClubById","clubId","createClub","clubData","updateClub","deleteClub","getClubsByOwner","removePicture","pictureUrl","encodeURIComponent","joinClub","reviewsAPI","getClubReviews","createReview","reviewData","getClubRating","getClubComments","createComment","commentData","reservationsAPI","getMyReservations","createReservation","reservationData","getAvailableTimeSlots","date","auth","clubs","reservations","reviews"],"sources":["F:/Diplomna rabota 3/app/frontend-react/src/utils/api.js"],"sourcesContent":["// api.js - Comprehensive API client for FastAPI backend\r\n\r\nimport { getToken } from './auth';\r\n\r\n// Base API URL - use explicit URL instead of relying on proxy which might not be working\r\nexport const API_BASE = 'http://localhost:8000';\r\nexport const API_PATH = '/api/v1'; // Keep v1 as it's needed based on the backend\r\n\r\n/**\r\n * Core API request function with automatic token handling\r\n */\r\nexport async function apiRequest(path, { method = 'GET', body, token, headers = {} } = {}) {\r\n  // Get token from auth utility if not provided explicitly\r\n  const authToken = token || getToken();\r\n  \r\n  // Build headers with auth token if available\r\n  const requestHeaders = { \r\n    'Content-Type': 'application/json',\r\n    ...headers\r\n  };\r\n  \r\n  if (authToken) {\r\n    requestHeaders['Authorization'] = `Bearer ${authToken}`;\r\n  }\r\n\r\n  // Build the full URL\r\n  const url = `${API_BASE}${path}`;\r\n  \r\n  try {\r\n    console.log(`Making ${method} request to ${url}`, {\r\n      method,\r\n      headers: { ...requestHeaders, Authorization: authToken ? 'Bearer [HIDDEN]' : undefined },\r\n      bodyPreview: body ? JSON.stringify(body).substring(0, 100) + (JSON.stringify(body).length > 100 ? '...' : '') : undefined\r\n    });\r\n    \r\n    const response = await fetch(url, {\r\n      method,\r\n      headers: requestHeaders,\r\n      body: body ? JSON.stringify(body) : undefined,\r\n    });\r\n\r\n    // Log response status for debugging\r\n    console.log(`Response status: ${response.status} ${response.statusText}`);\r\n    \r\n    // Get the response text first\r\n    const responseText = await response.text();\r\n    \r\n    // Try to parse it as JSON\r\n    let data;\r\n    try {\r\n      data = JSON.parse(responseText);\r\n    } catch (e) {\r\n      console.log(\"Response is not JSON:\", responseText.substring(0, 500) + (responseText.length > 500 ? '...' : ''));\r\n      data = { detail: responseText };\r\n    }\r\n    \r\n    // Log response data for debugging\r\n    console.log(\"Response data preview:\", \r\n      typeof data === 'object' ? \r\n        JSON.stringify(data).substring(0, 200) + (JSON.stringify(data).length > 200 ? '...' : '') \r\n        : data\r\n    );\r\n    \r\n    // Handle API errors\r\n    if (!response.ok) {\r\n      if (response.status === 404) {\r\n        // For 404s, return a standard response instead of throwing\r\n        // This is useful for endpoints that might not exist in development\r\n        if (method === 'GET') {\r\n          console.log(\"Resource not found but handling gracefully\");\r\n          return Array.isArray(data) ? [] : {};\r\n        }\r\n      }\r\n      \r\n      const error = {\r\n        status: response.status,\r\n        data,\r\n        message: data.detail || data.message || `Error ${response.status}: ${response.statusText}`\r\n      };\r\n      \r\n      console.error('API error:', error);\r\n      \r\n      // Special handling for 500 errors to give more details\r\n      if (response.status >= 500) {\r\n        console.error('Server error details:', data);\r\n      }\r\n      \r\n      throw error;\r\n    }\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    // Enhance error with additional info if it's not already our format\r\n    if (!error.status) {\r\n      console.error('API request failed:', error);\r\n      throw {\r\n        status: 0, \r\n        message: error.message || 'Network error, please check your connection',\r\n        data: {}\r\n      };\r\n    }\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Authentication API\r\nexport const authAPI = {\r\n  // Direct login implementation using fetch\r\n  login: async (email, password) => {\r\n    console.log(`Attempting login for email: ${email} with direct fetch`);\r\n    try {\r\n      // Show detailed request info for debugging\r\n      const requestData = {\r\n        email,\r\n        password\r\n      };\r\n      \r\n      console.log(\"Login request data:\", { email, passwordLength: password?.length });\r\n      console.log(\"API endpoint:\", `${API_BASE}${API_PATH}/auth/login`);\r\n      \r\n      const response = await fetch(`${API_BASE}${API_PATH}/auth/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(requestData),\r\n        credentials: 'include'\r\n      });\r\n\r\n      console.log(`Login response status: ${response.status} ${response.statusText}`);\r\n      console.log(\"Response headers:\", \r\n        Array.from(response.headers.entries())\r\n          .map(([key, value]) => `${key}: ${key.toLowerCase() === 'set-cookie' ? '[COOKIE DATA]' : value}`)\r\n          .join(', ')\r\n      );\r\n      \r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        let errorData;\r\n        \r\n        try {\r\n          errorData = JSON.parse(errorText);\r\n        } catch (e) {\r\n          console.error(\"Error response is not valid JSON:\", errorText);\r\n          errorData = { detail: errorText };\r\n        }\r\n        \r\n        console.error(\"Login error:\", errorData);\r\n        throw {\r\n          status: response.status,\r\n          message: errorData.detail || `Error ${response.status}: ${response.statusText}`,\r\n          data: errorData\r\n        };\r\n      }\r\n      \r\n      const responseText = await response.text();\r\n      let data;\r\n      \r\n      try {\r\n        data = JSON.parse(responseText);\r\n      } catch (e) {\r\n        console.error(\"Response is not valid JSON:\", responseText);\r\n        throw {\r\n          status: 500,\r\n          message: \"Invalid response format from server\",\r\n          data: { detail: responseText }\r\n        };\r\n      }\r\n      \r\n      console.log(\"Login successful, received data:\", { \r\n        hasToken: !!data.access_token, \r\n        hasUser: !!data.user,\r\n        userId: data.user?.id,\r\n        username: data.user?.username\r\n      });\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      console.error(\"Login failed:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n    \r\n  register: (userData) => \r\n    apiRequest(`${API_PATH}/auth/register`, {\r\n      method: 'POST',\r\n      body: userData\r\n    }),\r\n    \r\n  getCurrentUser: () => \r\n    apiRequest(`${API_PATH}/users/me`, {\r\n      method: 'GET'\r\n    }),\r\n\r\n  // Method to validate if current authentication is valid\r\n  validateAuth: async () => {\r\n    console.log(\"Validating current authentication state\");\r\n    try {\r\n      // Attempt to get current user info to validate auth\r\n      const userData = await apiRequest(`${API_PATH}/users/me`, { \r\n        method: 'GET'\r\n      });\r\n      \r\n      console.log(\"Auth validation successful:\", userData);\r\n      return {\r\n        isValid: true,\r\n        userData\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Auth validation failed:\", error);\r\n      return {\r\n        isValid: false,\r\n        error\r\n      };\r\n    }\r\n  },\r\n    \r\n  updateProfile: (userData) => \r\n    apiRequest(`${API_PATH}/users/me`, {\r\n      method: 'PUT',\r\n      body: userData\r\n    }),\r\n    \r\n  // Google OAuth endpoints\r\n  googleLogin: () => {\r\n    const url = `${API_BASE}${API_PATH}/auth/google/login`;\r\n    console.log(`Redirecting to Google OAuth: ${url}`);\r\n    window.location.href = url;\r\n  },\r\n    \r\n  // This handles the redirect back from Google after authentication\r\n  handleGoogleCallback: async (code) => {\r\n    try {\r\n      console.log('Calling handleGoogleCallback with code:', code);\r\n      const data = await apiRequest(`${API_PATH}/auth/google/token-exchange`, {\r\n        method: 'POST',\r\n        body: { code }\r\n      });\r\n      console.log('Google callback response:', data);\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Google OAuth callback error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n// Clubs API\r\nexport const clubsAPI = {\r\n  getAllClubs: (filters = {}) => {\r\n    // Convert filters object to URL params\r\n    const params = new URLSearchParams();\r\n    Object.entries(filters).forEach(([key, value]) => {\r\n      if (value !== undefined && value !== null && value !== '') {\r\n        params.append(key, value);\r\n      }\r\n    });\r\n    \r\n    const queryString = params.toString() ? `?${params.toString()}` : '';\r\n    \r\n    return apiRequest(`${API_PATH}/clubs${queryString}`);\r\n  },\r\n  \r\n  getClubById: (clubId) => \r\n    apiRequest(`${API_PATH}/clubs/${clubId}`),\r\n    \r\n  createClub: (clubData) => {\r\n    console.log(\"Calling createClub API with data:\", clubData);\r\n    // Make sure the URL matches exactly what the backend expects\r\n    return apiRequest(`${API_PATH}/clubs/`, {  // Add trailing slash to match FastAPI endpoint\r\n      method: 'POST',\r\n      body: clubData\r\n    });\r\n  },\r\n    \r\n  updateClub: (clubId, clubData) => {\r\n    console.log(`Updating club ${clubId} with data:`, clubData);\r\n    return apiRequest(`${API_PATH}/clubs/${clubId}`, {\r\n      method: 'PUT',\r\n      body: clubData\r\n    });\r\n  },\r\n    \r\n  deleteClub: (clubId) => \r\n    apiRequest(`${API_PATH}/clubs/${clubId}`, {\r\n      method: 'DELETE'\r\n    }),\r\n    \r\n  getClubsByOwner: () => \r\n    apiRequest(`${API_PATH}/clubs/my-clubs`),\r\n  \r\n  removePicture: (clubId, pictureUrl) => \r\n    apiRequest(`${API_PATH}/clubs/${clubId}/pictures?picture_url=${encodeURIComponent(pictureUrl)}`, {\r\n      method: 'DELETE'\r\n    }),\r\n    \r\n  joinClub: (clubId) => \r\n    apiRequest(`${API_PATH}/clubs/${clubId}/join`, {\r\n      method: 'POST'\r\n    }),\r\n};\r\n\r\n// Reviews and Comments API\r\nexport const reviewsAPI = {\r\n  // Get all reviews for a club\r\n  getClubReviews: (clubId) => \r\n    apiRequest(`${API_PATH}/reviews/club/${clubId}`),\r\n  \r\n  // Create a new review\r\n  createReview: (reviewData) => {\r\n    console.log(\"Creating review with data:\", reviewData);\r\n    return apiRequest(`${API_PATH}/reviews/`, {\r\n      method: 'POST',\r\n      body: reviewData\r\n    });\r\n  },\r\n  \r\n  // Get average rating for a club\r\n  getClubRating: (clubId) =>\r\n    apiRequest(`${API_PATH}/reviews/club/${clubId}/rating`),\r\n  \r\n  // Get all comments for a club\r\n  getClubComments: (clubId) =>\r\n    apiRequest(`${API_PATH}/reviews/club/${clubId}/comments`),\r\n  \r\n  // Create a new comment\r\n  createComment: (commentData) => {\r\n    console.log(\"Creating comment with data:\", commentData);\r\n    return apiRequest(`${API_PATH}/reviews/comments`, {\r\n      method: 'POST',\r\n      body: commentData\r\n    });\r\n  }\r\n};\r\n\r\n// Reservations API\r\nexport const reservationsAPI = {\r\n  getMyReservations: async () => {\r\n    try {\r\n      return await apiRequest(`${API_PATH}/reservations/my-reservations`);\r\n    } catch (error) {\r\n      console.log('Reservations API might not be implemented yet:', error);\r\n      // Return empty array instead of throwing when endpoint doesn't exist\r\n      if (error.status === 404 || error.status === 405) {\r\n        return [];\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n    \r\n  createReservation: (reservationData) => {\r\n    console.log(\"Creating reservation with data:\", reservationData);\r\n    return apiRequest(`${API_PATH}/reservations/`, {\r\n      method: 'POST',\r\n      body: reservationData\r\n    });\r\n  },\r\n    \r\n  getAvailableTimeSlots: (clubId, date) => {\r\n    console.log(`Getting available slots for club ${clubId} on date ${date}`);\r\n    return apiRequest(`${API_PATH}/reservations/available-slots/${clubId}?date=${date}`);\r\n  }\r\n};\r\n\r\nexport default {\r\n  apiRequest,\r\n  auth: authAPI,\r\n  clubs: clubsAPI,\r\n  reservations: reservationsAPI,\r\n  reviews: reviewsAPI\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}