{"ast":null,"code":"// Reservation service utility functions\nimport { getToken } from './auth';\n\n// Base API URL - use explicit URLs \nconst API_BASE = 'http://localhost:8000';\nconst API_PATH = `${API_BASE}/api/v1`;\n\n/**\r\n * Get all reservations for the current user\r\n */\nexport const getMyReservations = async () => {\n  try {\n    const token = getToken();\n    if (!token) {\n      console.error('No authentication token available');\n      return [];\n    }\n    const response = await fetch(`${API_PATH}/reservations/my-reservations`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include'\n    });\n    if (!response.ok) {\n      if (response.status === 404) {\n        // API endpoint might not exist yet\n        console.log('Reservations endpoint not available');\n        return [];\n      }\n      const errorData = await response.json();\n      throw new Error(errorData.detail || `Error ${response.status}: ${response.statusText}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching reservations:', error);\n    return [];\n  }\n};\n\n/**\r\n * Get available time slots for a specific club on a specific date\r\n */\nexport const getAvailableTimeSlots = async (clubId, date) => {\n  try {\n    console.log(`Fetching available slots for club ${clubId} on date ${date}`);\n\n    // Make sure we have properly formatted date\n    if (!date || !date.match(/^\\d{4}-\\d{2}-\\d{2}$/)) {\n      throw new Error(\"Invalid date format. Use YYYY-MM-DD\");\n    }\n    const response = await fetch(`${API_PATH}/reservations/available-slots/${clubId}?date=${date}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include',\n      cache: 'no-store' // Ensure we always get fresh data\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || `Error ${response.status}: ${response.statusText}`);\n    }\n    const data = await response.json();\n\n    // Ensure we have a valid array response\n    if (!Array.isArray(data)) {\n      console.error(\"API returned non-array data for time slots:\", data);\n      return [];\n    }\n    return data;\n  } catch (error) {\n    console.error('Error fetching available time slots:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Create a new reservation\r\n */\nexport const createReservation = async reservationData => {\n  try {\n    const token = getToken();\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n    console.log(\"Creating reservation with data:\", reservationData);\n    const response = await fetch(`${API_PATH}/reservations/`, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(reservationData),\n      credentials: 'include'\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || `Error ${response.status}: ${response.statusText}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error creating reservation:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Cancel an existing reservation\r\n */\nexport const cancelReservation = async reservationId => {\n  try {\n    const token = getToken();\n    if (!token) {\n      throw new Error('Authentication required to cancel a reservation');\n    }\n    const response = await fetch(`${API_PATH}/reservations/${reservationId}`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include'\n    });\n    if (!response.ok) {\n      if (response.status !== 204) {\n        // 204 is success with no content\n        const errorData = await response.json();\n        throw new Error(errorData.detail || `Error ${response.status}: ${response.statusText}`);\n      }\n    }\n    return true;\n  } catch (error) {\n    console.error('Error canceling reservation:', error);\n    throw error;\n  }\n};\n\n// Export default object with all functions\nexport default {\n  getMyReservations,\n  getAvailableTimeSlots,\n  createReservation,\n  cancelReservation\n};","map":{"version":3,"names":["getToken","API_BASE","API_PATH","getMyReservations","token","console","error","response","fetch","method","headers","credentials","ok","status","log","errorData","json","Error","detail","statusText","data","getAvailableTimeSlots","clubId","date","match","cache","Array","isArray","createReservation","reservationData","body","JSON","stringify","cancelReservation","reservationId"],"sources":["F:/Diplomna rabota 3/app/frontend-react/src/utils/reservationService.js"],"sourcesContent":["// Reservation service utility functions\r\nimport { getToken } from './auth';\r\n\r\n// Base API URL - use explicit URLs \r\nconst API_BASE = 'http://localhost:8000';\r\nconst API_PATH = `${API_BASE}/api/v1`;\r\n\r\n/**\r\n * Get all reservations for the current user\r\n */\r\nexport const getMyReservations = async () => {\r\n  try {\r\n    const token = getToken();\r\n    if (!token) {\r\n      console.error('No authentication token available');\r\n      return [];\r\n    }\r\n\r\n    const response = await fetch(`${API_PATH}/reservations/my-reservations`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      credentials: 'include'\r\n    });\r\n\r\n    if (!response.ok) {\r\n      if (response.status === 404) {\r\n        // API endpoint might not exist yet\r\n        console.log('Reservations endpoint not available');\r\n        return [];\r\n      }\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.detail || `Error ${response.status}: ${response.statusText}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching reservations:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n/**\r\n * Get available time slots for a specific club on a specific date\r\n */\r\nexport const getAvailableTimeSlots = async (clubId, date) => {\r\n  try {\r\n    console.log(`Fetching available slots for club ${clubId} on date ${date}`);\r\n    \r\n    // Make sure we have properly formatted date\r\n    if (!date || !date.match(/^\\d{4}-\\d{2}-\\d{2}$/)) {\r\n      throw new Error(\"Invalid date format. Use YYYY-MM-DD\");\r\n    }\r\n    \r\n    const response = await fetch(`${API_PATH}/reservations/available-slots/${clubId}?date=${date}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      credentials: 'include',\r\n      cache: 'no-store' // Ensure we always get fresh data\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.detail || `Error ${response.status}: ${response.statusText}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    \r\n    // Ensure we have a valid array response\r\n    if (!Array.isArray(data)) {\r\n      console.error(\"API returned non-array data for time slots:\", data);\r\n      return [];\r\n    }\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching available time slots:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Create a new reservation\r\n */\r\nexport const createReservation = async (reservationData) => {\r\n  try {\r\n    const token = getToken();\r\n    const headers = {\r\n      'Content-Type': 'application/json'\r\n    };\r\n    \r\n    if (token) {\r\n      headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n\r\n    console.log(\"Creating reservation with data:\", reservationData);\r\n    const response = await fetch(`${API_PATH}/reservations/`, {\r\n      method: 'POST',\r\n      headers,\r\n      body: JSON.stringify(reservationData),\r\n      credentials: 'include'\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.detail || `Error ${response.status}: ${response.statusText}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error creating reservation:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Cancel an existing reservation\r\n */\r\nexport const cancelReservation = async (reservationId) => {\r\n  try {\r\n    const token = getToken();\r\n    if (!token) {\r\n      throw new Error('Authentication required to cancel a reservation');\r\n    }\r\n\r\n    const response = await fetch(`${API_PATH}/reservations/${reservationId}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      credentials: 'include'\r\n    });\r\n\r\n    if (!response.ok) {\r\n      if (response.status !== 204) { // 204 is success with no content\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || `Error ${response.status}: ${response.statusText}`);\r\n      }\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error canceling reservation:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Export default object with all functions\r\nexport default {\r\n  getMyReservations,\r\n  getAvailableTimeSlots,\r\n  createReservation,\r\n  cancelReservation\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}